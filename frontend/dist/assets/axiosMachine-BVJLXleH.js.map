{"version":3,"file":"axiosMachine-BVJLXleH.js","sources":["../../src/api/axiosMachine.tsx"],"sourcesContent":["import axiosInstance from './axiosInit';\r\n\r\n// ------- Machine related ------\r\n\r\n/**\r\n * Create a new machine.\r\n * @param {Object} machineData - The data of the machine to create.\r\n * @returns {Promise<Object>} - The response data containing the created machine.\r\n */\r\nexport const createMachine = async (machineData: any) => {\r\n    try {\r\n      const response = await axiosInstance.post('/machines', machineData);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to create machine');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get all machines.\r\n   * @returns {Promise<Object>} - The response data containing all machines.\r\n   * Admin only\r\n   */\r\n  export const getAllMachines = async () => {\r\n    try {\r\n      const response = await axiosInstance.get('/machines');\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch machines');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get active machines.\r\n   * @returns {Promise<Object>} - The response data containing active machines.\r\n   */\r\n  export const getActiveMachines = async () => {\r\n    try {\r\n      const response = await axiosInstance.get('/machines/active');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch active machines');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get inactive machines.\r\n   * @returns {Promise<Object>} - The response data containing inactive machines.\r\n   * Admin only\r\n   */\r\n  export const getInactiveMachines = async () => {\r\n    try {\r\n      const response = await axiosInstance.get('/machines/inactive');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch inactive machines');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Activate a specific machine.\r\n   * @param {string} machineId - The ID of the machine to activate.\r\n   * @returns {Promise<Object>} - The response data confirming activation.\r\n   * Admin only\r\n   */\r\n  export const activateMachine = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/machines/${machineId}/active`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to activate machine');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Deactivate a specific machine.\r\n   * @param {string} machineId - The ID of the machine to deactivate.\r\n   * @returns {Promise<Object>} - The response data confirming deactivation.\r\n   * Admin only\r\n   */\r\n  export const deactivateMachine = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/machines/${machineId}/deactive`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to deactivate machine');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get details of a specific machine.\r\n   * @param {string} machineId - The ID of the machine to retrieve.\r\n   * @returns {Promise<Object>} - The response data containing machine details.\r\n   * Admin only\r\n   */\r\n  export const getMachineDetails = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/machines/${machineId}`);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch machine details');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get inactive machine details.\r\n   * @param {string} machineId - The ID of the machine to retrieve.\r\n   * @returns {Promise<Object>} - The response data containing machine details.\r\n   * Admin only\r\n   */\r\n  export const getInactiveMachineDetails = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/machines/inactive/${machineId}`);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch machine details');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get active machine details.\r\n   * @param {string} machineId - The ID of the machine to retrieve.\r\n   * @returns {Promise<Object>} - The response data containing machine details.\r\n   */\r\n  export const getActiveMachineDetails = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/machines/active/${machineId}`);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch machine details');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get machine status.\r\n   * @param {string} machineId - The ID of the machine to retrieve.\r\n   * @returns {Promise<Object>} - The response data containing machine status.\r\n   */\r\n  export const getMachineStatus = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/machines/${machineId}/status`);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch machine status');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Update a specific machine.\r\n   * @param {string} machineId - The ID of the machine to update.\r\n   * @param {Object} updateData - The data to update.\r\n   * @returns {Promise<Object>} - The response data containing the updated machine.\r\n   * Admin only\r\n   */\r\n  export const updateMachine = async (machineId: string, updateData: any) => {\r\n    try {\r\n      const response = await axiosInstance.put(`/machines/${machineId}`, updateData);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to update machine');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Delete a specific machine.\r\n   * @param {string} machineId - The ID of the machine to delete.\r\n   * @returns {Promise<Object>} - The response data confirming deletion.\r\n   * Admin only\r\n   */\r\n  export const deleteMachine = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.delete(`/machines/${machineId}`);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to delete machine');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get machine hints.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @returns {Promise<Object>} - The response data containing machine hints.\r\n   */\r\n  export const getMachineHints = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/machines/${machineId}/hints`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch machine hints');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get used hints in a machine.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @returns {Promise<Object>} - The response data containing used hints.\r\n   */\r\n  export const getUsedHints = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/machines/${machineId}/used-hints`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch used hints');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get user progress.\r\n   * @returns {Promise<Object>} - The response data containing user progress.\r\n   */\r\n  export const getUserProgress = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/machines/${machineId}/progress`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch user progress');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Submit a flag for a specific machine.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @param {string} flag - The flag to submit.\r\n   * @returns {Promise<Object>} - The response data confirming submission.\r\n   */\r\n  export const submitFlagMachine = async (machineId: string, flag: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/machines/${machineId}/submit-flag`, { flag });\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to submit flag');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Post a machine review.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @param {Object} reviewData - The data of the review to post.\r\n   * @returns {Promise<Object>} - The response data containing the posted review.\r\n   */\r\n  export const postMachineReview = async (machineId: string, reviewData: any) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/machines/${machineId}/review`, reviewData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to post machine review');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Update a machine review.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @param {string} reviewId - The ID of the review to update.\r\n   * @param {Object} updateData - The data to update.\r\n   * @returns {Promise<Object>} - The response data containing the updated review.\r\n   */\r\n  export const updateMachineReview = async (machineId: string, reviewId: string, updateData: any) => {\r\n    try {\r\n      const response = await axiosInstance.put(`/machines/${machineId}/reviews/${reviewId}`, updateData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to update machine review');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Delete a machine review.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @param {string} reviewId - The ID of the review to delete.\r\n   * @returns {Promise<Object>} - The response data confirming deletion.\r\n   */\r\n  export const deleteMachineReview = async (machineId: string, reviewId: string) => {\r\n    try {\r\n      const response = await axiosInstance.delete(`/machines/${machineId}/reviews/${reviewId}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to delete machine review');\r\n    }\r\n  };\r\n  \r\n  export const deleteMyMachineReview = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.delete(`/machines/${machineId}/reviews`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to delete machine review');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get a machine review by review ID.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @param {string} reviewId - The ID of the review to retrieve.\r\n   * @returns {Promise<Object>} - The response data containing the machine review.\r\n   */\r\n  export const getMachineReview = async (machineId: string, reviewId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/machines/${machineId}/reviews/${reviewId}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch machine review');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get a machine rating.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @returns {Promise<Object>} - The response data containing the machine rating.\r\n   */\r\n  export const getMachineRating = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/machines/${machineId}/rating`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch machine rating');\r\n    }\r\n  };  \r\n  \r\n  /**\r\n   * Get machine reviews.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @returns {Promise<Object>} - The response data containing machine reviews.\r\n   */\r\n  export const getMachineReviews = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/machines/${machineId}/reviews`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch machine reviews');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Delete a machine review forcefully.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @param {string} reviewId - The ID of the review to delete.\r\n   * @returns {Promise<Object>} - The response data confirming deletion.\r\n   * Admin only\r\n   */\r\n  export const deleteMachineReviewForce = async (machineId: string, reviewId: string) => {\r\n    try {\r\n      const response = await axiosInstance.delete(`/machines/${machineId}/reviews/${reviewId}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to delete machine review');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Give up a machine.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @returns {Promise<Object>} - The response data confirming giving up.\r\n   */\r\n  export const giveUpMachine = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/machines/${machineId}/give-up`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to give up machine');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Start playing a machine.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @returns {Promise<Object>} - The response data confirming starting.\r\n   */\r\n  export const startPlayingMachine = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/machines/${machineId}/start-play`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to start playing machine');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get latest machine.\r\n   * @returns {Promise<Object>} - The response data containing the latest machine.\r\n   */\r\n  export const getLatestMachine = async () => {\r\n    try {\r\n      const response = await axiosInstance.get('/machines/latest');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch latest machine');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get most played machine.\r\n   * @returns {Promise<Object>} - The response data containing the most played machine.\r\n   */\r\n  export const getMostPlayedMachine = async () => {\r\n    try {\r\n      const response = await axiosInstance.get('/machines/most-played');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch most played machine');\r\n    }\r\n  };"],"names":["createMachine","machineData","axiosInstance","error","getAllMachines","getActiveMachines","activateMachine","machineId","deactivateMachine","getActiveMachineDetails","deleteMachine","getMachineHints","getUsedHints","submitFlagMachine","flag","postMachineReview","reviewData","getMachineReviews","giveUpMachine","startPlayingMachine","getLatestMachine","getMostPlayedMachine"],"mappings":"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"}