{"version":3,"file":"ContestPlayPage-nI5ol5Sw.js","sources":["../../src/components/play/Timer.tsx","../../src/pages/contest/ContestPlayPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\ninterface TimerProps {\r\n  endTime: string;\r\n}\r\n\r\nconst Timer: React.FC<TimerProps> = ({ endTime }) => {\r\n  const calculateTimeLeft = (): Record<string, number> => {\r\n    const difference = +new Date(endTime) - +new Date();\r\n    let timeLeft: Record<string, number> = {};\r\n\r\n    if (difference > 0) {\r\n      timeLeft = {\r\n        Hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n        Minutes: Math.floor((difference / 1000 / 60) % 60),\r\n        Seconds: Math.floor((difference / 1000) % 60),\r\n      };\r\n    }\r\n\r\n    return timeLeft;\r\n  };\r\n\r\n  const [timeLeft, setTimeLeft] = useState<Record<string, number>>(calculateTimeLeft());\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setTimeLeft(calculateTimeLeft());\r\n    }, 1000);\r\n\r\n    // Cleanup\r\n    return () => clearTimeout(timer);\r\n  }, [endTime]);\r\n\r\n  const timerComponents: JSX.Element[] = [];\r\n\r\n  Object.keys(timeLeft).forEach((interval) => {\r\n    if (!timeLeft[interval]) {\r\n      return;\r\n    }\r\n\r\n    timerComponents.push(\r\n      <span key={interval}>\r\n        {timeLeft[interval]} {interval}{\" \"}\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      {timerComponents.length ? timerComponents : <span>Contest Ended</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getContestDetails } from '../../api/axiosContest';\r\nimport { getInstanceByMachine } from '../../api/axiosInstance';\r\nimport DisplayReward from '../../components/play/DisplayReward';\r\nimport GetHints from '../../components/play/GetHints';\r\nimport StartInstanceButton from '../../components/play/StartInstanceButton';\r\nimport DownloadVPNProfile from '../../components/play/DownloadVPNProfile';\r\nimport InstanceInfo from '../../components/play/InstanceInfo';\r\nimport SubmitFlagForm from '../../components/play/SubmitFlagForm';\r\nimport Timer from '../../components/play/Timer';\r\nimport GiveUpButton from '../../components/play/GiveUpButton';\r\nimport Main from '../../components/main/Main';\r\nimport { ContestDetail, Machine } from '../../types/Contest';\r\nimport { Instance } from '../../types/Instance';\r\nimport '../../assets/scss/contest/ContestPlayPage.scss';\r\n\r\n/**\r\n * Interface for API response when fetching contest details.\r\n */\r\ninterface GetContestDetailsResponse {\r\n  contest: ContestDetail;\r\n  // Add other response properties if available\r\n}\r\n\r\n/**\r\n * Component representing the Contest Play Page.\r\n */\r\nconst ContestPlayPage: React.FC = () => {\r\n  const { contestId } = useParams<{ contestId: string }>();\r\n  const [contest, setContest] = useState<ContestDetail | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedMachine, setSelectedMachine] = useState<Machine | null>(null);\r\n  const [instanceStatus, setInstanceStatus] = useState<Instance['status']>(null);\r\n  const [instanceStarted, setInstanceStarted] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n  // Fetch contest details and check for existing instance when component mounts\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!contestId) {\r\n        setError('Contest ID is missing.');\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Fetch contest details\r\n        const contestResponse: GetContestDetailsResponse = await getContestDetails(contestId);\r\n        console.log('Contest Details:', contestResponse.contest); // Debugging\r\n        setContest(contestResponse.contest);\r\n\r\n        setIsLoading(false);\r\n      } catch (err: any) {\r\n        console.error('Error fetching contest details:', err);\r\n        setError(err.msg || 'Failed to fetch contest details.');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [contestId]);\r\n\r\n  // Handle machine selection\r\n  const handleMachineSelect = async (machine: Machine) => {\r\n    setSelectedMachine(machine);\r\n    setInstanceStarted(false); // Reset instanceStarted when selecting a new machine\r\n    setInstanceStatus(null); // Reset instance status\r\n\r\n    // Check for existing instance for the selected machine within the contest\r\n    try {\r\n      const instanceResponse = await getInstanceByMachine(machine._id);\r\n      console.log('Instance Response:', instanceResponse); // Debugging\r\n\r\n      if (instanceResponse.instances && instanceResponse.instances.length > 0) {\r\n        setInstanceStarted(true);\r\n        // Set initial instance status\r\n        const currentInstance = instanceResponse.instances[0];\r\n        setInstanceStatus(currentInstance.status);\r\n        console.log('Existing Instance Found:', currentInstance); // Debugging\r\n      } else {\r\n        setInstanceStarted(false);\r\n        setInstanceStatus(null);\r\n        console.log('No Existing Instance Found'); // Debugging\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching instances:', error);\r\n      setError('Failed to fetch instance details.');\r\n    }\r\n  };\r\n\r\n  // Callback to receive instance status from InstanceInfo\r\n  const handleInstanceStatusChange = (status: Instance['status']) => {\r\n    console.log('Instance status changed to:', status); // Debugging\r\n    setInstanceStatus(status);\r\n  };\r\n\r\n  // Callback to set instance as started\r\n  const handleInstanceStarted = () => {\r\n    console.log('Instance has been started.'); // Debugging\r\n    setInstanceStarted(true);\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <Main>\r\n        <div className=\"contest-play-container\">\r\n          <h2>Contest Play</h2>\r\n          <div className=\"error-message\">{error}</div>\r\n        </div>\r\n      </Main>\r\n    );\r\n  }\r\n\r\n  if (!contest || isLoading) {\r\n    return (\r\n      <Main>\r\n        <div className=\"contest-play-container\">\r\n          <h2>Contest Play</h2>\r\n          <div>Loading contest details...</div>\r\n        </div>\r\n      </Main>\r\n    );\r\n  }\r\n\r\n  // Determine if controls should be disabled based on instance status\r\n  const isRunning = instanceStatus === 'running';\r\n\r\n  return (\r\n    <Main>\r\n      <div className=\"contest-play-container\">\r\n        <div className=\"contest-play-title\">\r\n          <h2>Contest Play</h2>\r\n        </div>\r\n        <div className=\"contest-play-name\">\r\n          <h3>Contest: {contest.name}</h3>\r\n        </div>\r\n        <div className=\"contest-play-timer\">\r\n          <Timer endTime={contest.endTime} />\r\n        </div>\r\n\r\n        {/* List of Machines */}\r\n        <div className=\"select-machines\">\r\n          <h3>Select a Machine:</h3>\r\n          <ul className=\"select-machine-list\">\r\n            {contest.machines.map((machine) => (\r\n              <li\r\n                key={machine._id}\r\n                className={`select-machine-item ${\r\n                  selectedMachine?._id === machine._id ? 'selected' : ''\r\n                }`}\r\n                onClick={() => handleMachineSelect(machine)}\r\n                style={{\r\n                  cursor: 'pointer',\r\n                  padding: '10px',\r\n                  border: selectedMachine?._id === machine._id ? '2px solid blue' : '1px solid #ccc',\r\n                  marginBottom: '5px',\r\n                  borderRadius: '4px',\r\n                }}\r\n              >\r\n                {machine.name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n        {selectedMachine ? (\r\n          <>\r\n            <div className=\"contest-play-name\">\r\n              <h3>Now Playing: {selectedMachine.name}</h3>\r\n            </div>\r\n            <DisplayReward reward={contest.contestExp} />\r\n            <DownloadVPNProfile />\r\n\r\n            {/* Conditionally render StartInstanceButton or InstanceInfo */}\r\n            {!instanceStarted ? (\r\n              <StartInstanceButton\r\n                machineId={selectedMachine._id}\r\n                onInstanceStarted={handleInstanceStarted} // Pass the callback\r\n              />\r\n            ) : (\r\n              <InstanceInfo\r\n                machineId={selectedMachine._id}\r\n                onStatusChange={handleInstanceStatusChange}\r\n              />\r\n            )}\r\n\r\n            <GetHints\r\n              machineId={selectedMachine._id}\r\n              playType=\"contest\"\r\n              contestId={contestId}\r\n              disabled={!isRunning} // Disable based on instance status\r\n            />\r\n            <SubmitFlagForm\r\n              contestId={contestId}\r\n              machineId={selectedMachine._id}\r\n              playType=\"contest\"\r\n              disabled={!isRunning} // Disable based on instance status\r\n            />\r\n            <GiveUpButton\r\n              contestId={contestId}\r\n              machineId={selectedMachine._id}\r\n              machineName={selectedMachine.name}\r\n              mode=\"contest\"\r\n              //disabled={!isRunning} // Disable based on instance status\r\n            />\r\n          </>\r\n        ) : (\r\n          <div>Please select a machine to start playing.</div>\r\n        )}\r\n      </div>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default ContestPlayPage;"],"names":["Timer","endTime","calculateTimeLeft","difference","timeLeft","setTimeLeft","useState","useEffect","timer","timerComponents","interval","jsx","ContestPlayPage","contestId","useParams","contest","setContest","error","setError","selectedMachine","setSelectedMachine","instanceStatus","setInstanceStatus","instanceStarted","setInstanceStarted","isLoading","setIsLoading","contestResponse","getContestDetails","err","handleMachineSelect","machine","instanceResponse","getInstanceByMachine","currentInstance","handleInstanceStatusChange","status","handleInstanceStarted","Main","jsxs","isRunning","Fragment","DisplayReward","DownloadVPNProfile","InstanceInfo","StartInstanceButton","GetHints","SubmitFlagForm","GiveUpButton"],"mappings":"wRAMA,MAAMA,EAA8B,CAAC,CAAE,QAAAC,KAAc,CACnD,MAAMC,EAAoB,IAA8B,CAChD,MAAAC,EAAa,CAAC,IAAI,KAAKF,CAAO,EAAI,KAAK,KAC7C,IAAIG,EAAmC,CAAC,EAExC,OAAID,EAAa,IACfC,EAAW,CACT,MAAO,KAAK,MAAOD,EAAc,KAAmB,EAAE,EACtD,QAAS,KAAK,MAAOA,EAAa,IAAO,GAAM,EAAE,EACjD,QAAS,KAAK,MAAOA,EAAa,IAAQ,EAAE,CAC9C,GAGKC,CACT,EAEM,CAACA,EAAUC,CAAW,EAAIC,EAAA,SAAiCJ,GAAmB,EAEpFK,EAAAA,UAAU,IAAM,CACR,MAAAC,EAAQ,WAAW,IAAM,CAC7BH,EAAYH,GAAmB,GAC9B,GAAI,EAGA,MAAA,IAAM,aAAaM,CAAK,CAAA,EAC9B,CAACP,CAAO,CAAC,EAEZ,MAAMQ,EAAiC,CAAC,EAExC,cAAO,KAAKL,CAAQ,EAAE,QAASM,GAAa,CACrCN,EAASM,CAAQ,GAIND,EAAA,YACb,OACE,CAAA,SAAA,CAAAL,EAASM,CAAQ,EAAE,IAAEA,EAAU,GAAA,CAAA,EADvBA,CAEX,CACF,CAAA,CACD,EAGCC,EAAAA,IAAC,MAAI,CAAA,UAAU,QACZ,SAAAF,EAAgB,OAASA,EAAkBE,EAAA,IAAC,OAAK,CAAA,SAAA,eAAa,CAAA,EACjE,CAEJ,ECxBMC,EAA4B,IAAM,CAChC,KAAA,CAAE,UAAAC,CAAU,EAAIC,EAAiC,EACjD,CAACC,EAASC,CAAU,EAAIV,EAAAA,SAA+B,IAAI,EAC3D,CAACW,EAAOC,CAAQ,EAAIZ,EAAAA,SAAwB,IAAI,EAChD,CAACa,EAAiBC,CAAkB,EAAId,EAAAA,SAAyB,IAAI,EACrE,CAACe,EAAgBC,CAAiB,EAAIhB,EAAAA,SAA6B,IAAI,EACvE,CAACiB,EAAiBC,CAAkB,EAAIlB,EAAAA,SAAkB,EAAK,EAC/D,CAACmB,EAAWC,CAAY,EAAIpB,EAAAA,SAAkB,EAAI,EAGxDC,EAAAA,UAAU,IAAM,EACI,SAAY,CAC5B,GAAI,CAACM,EAAW,CACdK,EAAS,wBAAwB,EACjCQ,EAAa,EAAK,EAClB,MAAA,CAGE,GAAA,CAEI,MAAAC,EAA6C,MAAMC,EAAkBf,CAAS,EAC5E,QAAA,IAAI,mBAAoBc,EAAgB,OAAO,EACvDX,EAAWW,EAAgB,OAAO,EAElCD,EAAa,EAAK,QACXG,EAAU,CACT,QAAA,MAAM,kCAAmCA,CAAG,EAC3CX,EAAAW,EAAI,KAAO,kCAAkC,EACtDH,EAAa,EAAK,CAAA,CAEtB,GAEU,CAAA,EACT,CAACb,CAAS,CAAC,EAGR,MAAAiB,EAAsB,MAAOC,GAAqB,CACtDX,EAAmBW,CAAO,EAC1BP,EAAmB,EAAK,EACxBF,EAAkB,IAAI,EAGlB,GAAA,CACF,MAAMU,EAAmB,MAAMC,EAAqBF,EAAQ,GAAG,EAG/D,GAFQ,QAAA,IAAI,qBAAsBC,CAAgB,EAE9CA,EAAiB,WAAaA,EAAiB,UAAU,OAAS,EAAG,CACvER,EAAmB,EAAI,EAEjB,MAAAU,EAAkBF,EAAiB,UAAU,CAAC,EACpDV,EAAkBY,EAAgB,MAAM,EAChC,QAAA,IAAI,2BAA4BA,CAAe,CAAA,MAEvDV,EAAmB,EAAK,EACxBF,EAAkB,IAAI,EACtB,QAAQ,IAAI,4BAA4B,QAEnCL,EAAY,CACX,QAAA,MAAM,4BAA6BA,CAAK,EAChDC,EAAS,mCAAmC,CAAA,CAEhD,EAGMiB,EAA8BC,GAA+B,CACzD,QAAA,IAAI,8BAA+BA,CAAM,EACjDd,EAAkBc,CAAM,CAC1B,EAGMC,EAAwB,IAAM,CAClC,QAAQ,IAAI,4BAA4B,EACxCb,EAAmB,EAAI,CACzB,EAEA,GAAIP,EACF,OACGN,EAAA,IAAA2B,EAAA,CACC,SAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,yBACb,SAAA,CAAA5B,EAAAA,IAAC,MAAG,SAAY,cAAA,CAAA,EACfA,EAAA,IAAA,MAAA,CAAI,UAAU,gBAAiB,SAAMM,CAAA,CAAA,CAAA,CAAA,CACxC,CACF,CAAA,EAIA,GAAA,CAACF,GAAWU,EACd,OACGd,EAAA,IAAA2B,EAAA,CACC,SAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,yBACb,SAAA,CAAA5B,EAAAA,IAAC,MAAG,SAAY,cAAA,CAAA,EAChBA,EAAAA,IAAC,OAAI,SAA0B,4BAAA,CAAA,CAAA,CAAA,CACjC,CACF,CAAA,EAKJ,MAAM6B,EAAYnB,IAAmB,UAErC,OACGV,EAAA,IAAA2B,EAAA,CACC,SAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,yBACb,SAAA,CAAA5B,EAAAA,IAAC,OAAI,UAAU,qBACb,SAACA,MAAA,KAAA,CAAG,wBAAY,CAClB,CAAA,EACCA,MAAA,MAAA,CAAI,UAAU,oBACb,gBAAC,KAAG,CAAA,SAAA,CAAA,YAAUI,EAAQ,IAAA,CAAA,CAAK,CAC7B,CAAA,EACAJ,EAAAA,IAAC,OAAI,UAAU,qBACb,eAACX,EAAM,CAAA,QAASe,EAAQ,OAAA,CAAS,CACnC,CAAA,EAGAwB,EAAAA,KAAC,MAAI,CAAA,UAAU,kBACb,SAAA,CAAA5B,EAAAA,IAAC,MAAG,SAAiB,mBAAA,CAAA,EACrBA,EAAAA,IAAC,MAAG,UAAU,sBACX,WAAQ,SAAS,IAAKoB,GACrBpB,EAAA,IAAC,KAAA,CAEC,UAAW,wBACTQ,GAAA,YAAAA,EAAiB,OAAQY,EAAQ,IAAM,WAAa,EACtD,GACA,QAAS,IAAMD,EAAoBC,CAAO,EAC1C,MAAO,CACL,OAAQ,UACR,QAAS,OACT,QAAQZ,GAAA,YAAAA,EAAiB,OAAQY,EAAQ,IAAM,iBAAmB,iBAClE,aAAc,MACd,aAAc,KAChB,EAEC,SAAQA,EAAA,IAAA,EAbJA,EAAQ,GAAA,CAehB,CACH,CAAA,CAAA,EACF,EAECZ,EAEGoB,EAAA,KAAAE,WAAA,CAAA,SAAA,CAAA9B,MAAC,MAAI,CAAA,UAAU,oBACb,SAAA4B,EAAA,KAAC,KAAG,CAAA,SAAA,CAAA,gBAAcpB,EAAgB,IAAA,CAAA,CAAK,CACzC,CAAA,EACCR,EAAAA,IAAA+B,EAAA,CAAc,OAAQ3B,EAAQ,UAAY,CAAA,QAC1C4B,EAAmB,EAAA,EAGlBpB,EAMAZ,EAAA,IAACiC,EAAA,CACC,UAAWzB,EAAgB,IAC3B,eAAgBgB,CAAA,CAClB,EARAxB,EAAA,IAACkC,EAAA,CACC,UAAW1B,EAAgB,IAC3B,kBAAmBkB,CAAA,CAAA,EASvB1B,EAAA,IAACmC,EAAA,CACC,UAAW3B,EAAgB,IAC3B,SAAS,UACT,UAAAN,EACA,SAAU,CAAC2B,CAAA,CACb,EACA7B,EAAA,IAACoC,EAAA,CACC,UAAAlC,EACA,UAAWM,EAAgB,IAC3B,SAAS,UACT,SAAU,CAACqB,CAAA,CACb,EACA7B,EAAA,IAACqC,EAAA,CACC,UAAAnC,EACA,UAAWM,EAAgB,IAC3B,YAAaA,EAAgB,KAC7B,KAAK,SAAA,CAAA,CAGT,CAAA,CAAA,EAECR,EAAA,IAAA,MAAA,CAAI,SAAyC,2CAAA,CAAA,CAAA,CAAA,CAElD,CACF,CAAA,CAEJ"}