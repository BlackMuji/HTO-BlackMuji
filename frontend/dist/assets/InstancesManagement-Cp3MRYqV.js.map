{"version":3,"file":"InstancesManagement-Cp3MRYqV.js","sources":["../../src/pages/admin/InstancesManagement.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport DataTable from '../../components/admin/DataTable/DataTable';\r\nimport Sidebar from '../../components/admin/AdminSidebar';\r\nimport ActionButtons from '../../components/admin/ActionButtons';\r\nimport ConfirmationModal from '../../components/admin/ConfirmationModal';\r\nimport ErrorMessage from '../../components/admin/ErrorMessage';\r\nimport { getAllInstances, TerminateInstanceById } from '../../api/axiosInstance';\r\ninterface Instance {\r\n  _id: string;\r\n  user: string;\r\n  machineType: string;\r\n  status: string;\r\n}\r\n\r\nconst InstancesManagement: React.FC = () => {\r\n  const [instances, setInstances] = useState<Instance[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [modal, setModal] = useState<{ isOpen: boolean; instanceId?: string }>({\r\n    isOpen: false,\r\n    instanceId: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchInstances = async () => {\r\n      try {\r\n        const res = await getAllInstances();\r\n        setInstances(res.instances);\r\n      } catch (err: any) {\r\n        console.error('Error fetching instances:', err);\r\n        setError('Failed to load instances.');\r\n      }\r\n    };\r\n\r\n    fetchInstances();\r\n  }, []);\r\n\r\n  const handleTerminateInstance = (instanceId: string) => {\r\n    setModal({ isOpen: true, instanceId });\r\n  };\r\n\r\n  const confirmTerminate = async () => {\r\n    const { instanceId } = modal;\r\n    if (!instanceId) return;\r\n\r\n    try {\r\n      await TerminateInstanceById(instanceId);\r\n      setInstances((prevInstances) => prevInstances.filter((inst) => inst._id !== instanceId));\r\n      setModal({ isOpen: false, instanceId: undefined });\r\n    } catch (err: any) {\r\n      console.error('Error terminating instance:', err);\r\n      setError('Failed to terminate instance.');\r\n      setModal({ isOpen: false, instanceId: undefined });\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    { header: 'User', accessor: 'user' },\r\n    { header: 'Machine Type', accessor: 'machineType' },\r\n    { header: 'Status', accessor: 'status' },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <Sidebar />\r\n      <div className=\"admin-content\">\r\n        <h1>Instances Management</h1>\r\n        {error && <ErrorMessage message={error} />}\r\n        <DataTable\r\n          columns={columns}\r\n          data={instances}\r\n          actions={undefined}\r\n        />\r\n        \r\n        {/* Render Action Buttons separately per row */}\r\n        <table className=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              {columns.map((col) => (\r\n                <th key={col.accessor}>{col.header}</th>\r\n              ))}\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {instances.map(instance => (\r\n              <tr key={instance._id}>\r\n                <td>{instance.user}</td>\r\n                <td>{instance.machineType}</td>\r\n                <td>{instance.status}</td>\r\n                <td>\r\n                  <ActionButtons\r\n                    onDelete={() => handleTerminateInstance(instance._id)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        \r\n        {/* Confirmation Modal */}\r\n        <ConfirmationModal\r\n          isOpen={modal.isOpen}\r\n          title=\"Confirm Terminate Instance\"\r\n          message=\"Are you sure you want to terminate this instance? This action cannot be undone.\"\r\n          onConfirm={confirmTerminate}\r\n          onCancel={() => setModal({ isOpen: false, instanceId: undefined })}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstancesManagement; "],"names":["InstancesManagement","instances","setInstances","useState","error","setError","modal","setModal","useEffect","res","getAllInstances","err","handleTerminateInstance","instanceId","confirmTerminate","TerminateInstanceById","prevInstances","inst","columns","jsxs","jsx","Sidebar","ErrorMessage","DataTable","col","instance","ActionButtons","ConfirmationModal"],"mappings":"8NAcA,MAAMA,EAAgC,IAAM,CAC1C,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAAA,SAAqB,CAAA,CAAE,EACnD,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAwB,IAAI,EAChD,CAACG,EAAOC,CAAQ,EAAIJ,WAAmD,CAC3E,OAAQ,GACR,WAAY,MAAA,CACb,EAEDK,EAAAA,UAAU,IAAM,EACS,SAAY,CAC7B,GAAA,CACI,MAAAC,EAAM,MAAMC,EAAgB,EAClCR,EAAaO,EAAI,SAAS,QACnBE,EAAU,CACT,QAAA,MAAM,4BAA6BA,CAAG,EAC9CN,EAAS,2BAA2B,CAAA,CAExC,GAEe,CACjB,EAAG,EAAE,EAEC,MAAAO,EAA2BC,GAAuB,CACtDN,EAAS,CAAE,OAAQ,GAAM,WAAAM,CAAA,CAAY,CACvC,EAEMC,EAAmB,SAAY,CAC7B,KAAA,CAAE,WAAAD,GAAeP,EACvB,GAAKO,EAED,GAAA,CACF,MAAME,EAAsBF,CAAU,EACzBX,EAACc,GAAkBA,EAAc,OAAQC,GAASA,EAAK,MAAQJ,CAAU,CAAC,EACvFN,EAAS,CAAE,OAAQ,GAAO,WAAY,OAAW,QAC1CI,EAAU,CACT,QAAA,MAAM,8BAA+BA,CAAG,EAChDN,EAAS,+BAA+B,EACxCE,EAAS,CAAE,OAAQ,GAAO,WAAY,OAAW,CAAA,CAErD,EAEMW,EAAU,CACd,CAAE,OAAQ,OAAQ,SAAU,MAAO,EACnC,CAAE,OAAQ,eAAgB,SAAU,aAAc,EAClD,CAAE,OAAQ,SAAU,SAAU,QAAS,CACzC,EAGE,OAAAC,EAAA,KAAC,MAAI,CAAA,UAAU,kBACb,SAAA,CAAAC,EAAA,IAACC,EAAQ,EAAA,EACTF,EAAAA,KAAC,MAAI,CAAA,UAAU,gBACb,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAoB,sBAAA,CAAA,EACvBhB,GAASgB,EAAAA,IAACE,EAAa,CAAA,QAASlB,CAAO,CAAA,EACxCgB,EAAA,IAACG,EAAA,CACC,QAAAL,EACA,KAAMjB,EACN,QAAS,MAAA,CACX,EAGAkB,EAAAA,KAAC,QAAM,CAAA,UAAU,aACf,SAAA,CAACC,EAAA,IAAA,QAAA,CACC,gBAAC,KACE,CAAA,SAAA,CAAQF,EAAA,IAAKM,GACZJ,EAAA,IAAC,MAAuB,SAAII,EAAA,MAAA,EAAnBA,EAAI,QAAsB,CACpC,EACDJ,EAAAA,IAAC,MAAG,SAAO,SAAA,CAAA,CAAA,CAAA,CACb,CACF,CAAA,QACC,QACE,CAAA,SAAAnB,EAAU,IAAIwB,UACZ,KACC,CAAA,SAAA,CAACL,EAAAA,IAAA,KAAA,CAAI,WAAS,IAAK,CAAA,EACnBA,EAAAA,IAAC,KAAI,CAAA,SAAAK,EAAS,WAAY,CAAA,EAC1BL,EAAAA,IAAC,KAAI,CAAA,SAAAK,EAAS,MAAO,CAAA,QACpB,KACC,CAAA,SAAAL,EAAA,IAACM,EAAA,CACC,SAAU,IAAMd,EAAwBa,EAAS,GAAG,CAAA,CAAA,CAExD,CAAA,CAAA,GAROA,EAAS,GASlB,CACD,CACH,CAAA,CAAA,EACF,EAGAL,EAAA,IAACO,EAAA,CACC,OAAQrB,EAAM,OACd,MAAM,6BACN,QAAQ,kFACR,UAAWQ,EACX,SAAU,IAAMP,EAAS,CAAE,OAAQ,GAAO,WAAY,MAAW,CAAA,CAAA,CAAA,CACnE,CACF,CAAA,CAAA,EACF,CAEJ"}