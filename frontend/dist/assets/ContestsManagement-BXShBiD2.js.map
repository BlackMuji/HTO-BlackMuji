{"version":3,"file":"ContestsManagement-BXShBiD2.js","sources":["../../src/pages/admin/ContestsManagement.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport DataTable from '../../components/admin/DataTable/DataTable';\r\nimport ActionButtons from '../../components/admin/ActionButtons';\r\nimport ConfirmationModal from '../../components/admin/ConfirmationModal';\r\nimport ErrorMessage from '../../components/admin/ErrorMessage';\r\nimport Sidebar from '../../components/admin/AdminSidebar';\r\nimport {\r\n  getContests,\r\n  ActivateContest,\r\n  DeactivateContest,\r\n  deleteContest,\r\n} from '../../api/axiosContest';\r\n\r\ninterface Contest {\r\n  _id: string;\r\n  name: string;\r\n  isActive: boolean;\r\n  startTime: string;\r\n  endTime: string;\r\n}\r\n\r\nconst ContestsManagement: React.FC = () => {\r\n  const [contests, setContests] = useState<Contest[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [modal, setModal] = useState<{ isOpen: boolean; contestId?: string; action?: string }>({\r\n    isOpen: false,\r\n    contestId: undefined,\r\n    action: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchContests = async () => {\r\n      try {\r\n        const res = await getContests();\r\n        setContests(res.contests);\r\n      } catch (err: any) {\r\n        console.error('Error fetching contests:', err);\r\n        setError('Failed to load contests.');\r\n      }\r\n    };\r\n\r\n    fetchContests();\r\n  }, []);\r\n\r\n  const handleToggleActive = (contestId: string, currentStatus: boolean) => {\r\n    setModal({ isOpen: true, contestId, action: currentStatus ? 'deactivate' : 'activate' });\r\n  };\r\n\r\n  const handleDeleteContest = (contestId: string) => {\r\n    setModal({ isOpen: true, contestId, action: 'delete' });\r\n  };\r\n\r\n  const confirmAction = async () => {\r\n    const { contestId, action } = modal;\r\n    if (!contestId || !action) return;\r\n\r\n    try {\r\n      if (action === 'activate') {\r\n        await ActivateContest(contestId);\r\n        setContests((prevContests) =>\r\n          prevContests.map((contest) =>\r\n            contest._id === contestId ? { ...contest, isActive: true } : contest\r\n          )\r\n        );\r\n      } else if (action === 'deactivate') {\r\n        await DeactivateContest(contestId);\r\n        setContests((prevContests) =>\r\n          prevContests.map((contest) =>\r\n            contest._id === contestId ? { ...contest, isActive: false } : contest\r\n          )\r\n        );\r\n      } else if (action === 'delete') {\r\n        await deleteContest(contestId);\r\n        setContests((prevContests) => prevContests.filter((contest) => contest._id !== contestId));\r\n      }\r\n      setModal({ isOpen: false, contestId: undefined, action: undefined });\r\n    } catch (err: any) {\r\n      console.error(`Error performing ${action} on contest:`, err);\r\n      setError(`Failed to ${action} contest.`);\r\n      setModal({ isOpen: false, contestId: undefined, action: undefined });\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    { header: 'Name', accessor: 'name' },\r\n    { header: 'Active', accessor: 'isActive' },\r\n    { header: 'Start Time', accessor: 'startTime' },\r\n    { header: 'End Time', accessor: 'endTime' },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <Sidebar />\r\n      <div className=\"admin-content\">\r\n        <h1>Contests Management</h1>\r\n        {error && <ErrorMessage message={error} />}\r\n        <DataTable\r\n          columns={columns}\r\n          data={contests.map(contest => ({\r\n            ...contest,\r\n            isActive: contest.isActive ? 'Yes' : 'No',\r\n          }))}\r\n          actions={undefined}\r\n        />\r\n        \r\n        {/* Render Action Buttons separately per row */}\r\n        <table className=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              {columns.map((col) => (\r\n                <th key={col.accessor}>{col.header}</th>\r\n              ))}\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {contests.map(contest => (\r\n              <tr key={contest._id}>\r\n                <td>{contest.name}</td>\r\n                <td>{contest.isActive ? 'Yes' : 'No'}</td>\r\n                <td>{new Date(contest.startTime).toLocaleString()}</td>\r\n                <td>{new Date(contest.endTime).toLocaleString()}</td>\r\n                <td>\r\n                  <ActionButtons\r\n                    onActivate={!contest.isActive ? () => handleToggleActive(contest._id, contest.isActive) : undefined}\r\n                    onDeactivate={contest.isActive ? () => handleToggleActive(contest._id, contest.isActive) : undefined}\r\n                    onDelete={() => handleDeleteContest(contest._id)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        \r\n        {/* Confirmation Modal */}\r\n        <ConfirmationModal\r\n          isOpen={modal.isOpen}\r\n          title={\r\n            modal.action === 'activate'\r\n              ? 'Confirm Activate Contest'\r\n              : modal.action === 'deactivate'\r\n              ? 'Confirm Deactivate Contest'\r\n              : 'Confirm Delete Contest'\r\n          }\r\n          message={\r\n            modal.action === 'activate'\r\n              ? 'Are you sure you want to activate this contest?'\r\n              : modal.action === 'deactivate'\r\n              ? 'Are you sure you want to deactivate this contest?'\r\n              : 'Are you sure you want to delete this contest? This action cannot be undone.'\r\n          }\r\n          onConfirm={confirmAction}\r\n          onCancel={() => setModal({ isOpen: false, contestId: undefined, action: undefined })}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContestsManagement;\r\n"],"names":["ContestsManagement","contests","setContests","useState","error","setError","modal","setModal","useEffect","res","getContests","err","handleToggleActive","contestId","currentStatus","handleDeleteContest","confirmAction","action","ActivateContest","prevContests","contest","DeactivateContest","deleteContest","columns","jsxs","jsx","Sidebar","ErrorMessage","DataTable","col","ActionButtons","ConfirmationModal"],"mappings":"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"}