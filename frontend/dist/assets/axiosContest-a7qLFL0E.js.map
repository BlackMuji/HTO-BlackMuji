{"version":3,"file":"axiosContest-a7qLFL0E.js","sources":["../../src/api/axiosContest.tsx"],"sourcesContent":["import axiosInstance from './axiosInit';\r\n\r\n// ------- Contest related ------\r\n\r\n/**\r\n * Get all contests.\r\n * @returns {Promise<Object>} - The response data containing all contests.\r\n * Admin only\r\n */\r\nexport const getContests = async () => {\r\n    try {\r\n      const response = await axiosInstance.get('/contest/');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch contests');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Create a new contest.\r\n   * @param {Object} contestData - The data of the contest to create.\r\n   * @returns {Promise<Object>} - The response data containing the created contest.\r\n   */\r\n  export const createContest = async (contestData: any) => {\r\n    try {\r\n      const response = await axiosInstance.post('/contest/', contestData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to create contest');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Participate in a specific contest.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @returns {Promise<Object>} - The response data confirming participation.\r\n   */\r\n  export const participateInContest = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/contest/${contestId}/participate`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to participate in contest');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Submit a flag for a specific machine in a contest.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @param {string} flag - The flag to submit.\r\n   * @returns {Promise<Object>} - The response data confirming submission.\r\n   */\r\n  export const submitFlagForContest = async (contestId: string, machineId: string, flag: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/contest/${contestId}/${machineId}/submit-flag`, { flag });\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to submit flag for contest');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get hints for a specific machine in a contest.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @returns {Promise<Object>} - The response data containing hints.\r\n   */\r\n  export const getHintInContest = async (contestId: string, machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/contest/${contestId}/${machineId}/hints`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch hints for contest');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Update a specific contest.\r\n   * @param {string} contestId - The ID of the contest to update.\r\n   * @param {Object} updateData - The data to update.\r\n   * @returns {Promise<Object>} - The response data containing the updated contest.\r\n   * Admin only\r\n   */\r\n  export const updateContest = async (contestId: string, updateData: any) => {\r\n    try {\r\n      const response = await axiosInstance.put(`/contest/${contestId}`, updateData);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to update contest');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Delete a specific contest.\r\n   * @param {string} contestId - The ID of the contest to delete.\r\n   * @returns {Promise<Object>} - The response data confirming deletion.\r\n   * Admin only\r\n   */\r\n  export const deleteContest = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.delete(`/contest/${contestId}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to delete contest');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get leaderboard by contest.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @returns {Promise<Object>} - The response data containing leaderboard.\r\n   */\r\n  export const getLeaderboardByContest = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/contest/${contestId}/leaderboard`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch leaderboard by contest');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get contest status.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @returns {Promise<Object>} - The response data containing contest status.\r\n   */\r\n  export const getContestStatus = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/contest/${contestId}/status`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch contest status');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get contest details.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @returns {Promise<Object>} - The response data containing contest details.\r\n   * Admin only\r\n   */\r\n  export const getContestDetails = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/contest/${contestId}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch contest details');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get user contest participation.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @returns {Promise<Object>} - The response data containing user contest participation.\r\n   */\r\n  export const getUserContestParticipation = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/contest/${contestId}/participate`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch user contest participation');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Activate a specific contest.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @returns {Promise<Object>} - The response data confirming activation.\r\n   * Admin only\r\n   */\r\n  export const ActivateContest = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/contest/${contestId}/active`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to activate contest');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Deactivate a specific contest.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @returns {Promise<Object>} - The response data confirming deactivation.\r\n   * Admin only\r\n   */\r\n  export const DeactivateContest = async (contestId: string) => { \r\n    try {\r\n      const response = await axiosInstance.post(`/contest/${contestId}/deactive`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to deactivate contest');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get active contest details.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @returns {Promise<Object>} - The response data containing active contest details.\r\n   */\r\n  export const getActiveContestDetails = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/contest/active/${contestId}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch active contest details');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get all active contests.\r\n   * @returns {Promise<Object>} - The response data containing all active contests.\r\n   */\r\n  export const getActiveContests = async () => {\r\n    try {\r\n      const response = await axiosInstance.get('/contest/active');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch active contests');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get all inactive contests.\r\n   * @returns {Promise<Object>} - The response data containing all inactive contests.\r\n   * Admin only\r\n   */\r\n  export const getInactiveContests = async () => {\r\n    try {\r\n      const response = await axiosInstance.get('/contest/inactive');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch inactive contests');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get inactive contest details.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @returns {Promise<Object>} - The response data containing inactive contest details.\r\n   * Admin only\r\n   */\r\n  export const getInactiveContestDetails = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/contest/inactive/${contestId}`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch inactive contest details');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get used hints in a contest.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @returns {Promise<Object>} - The response data containing used hints.\r\n   */\r\n  export const getUsedHintsInContest = async (contestId: string, machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/contest/${contestId}/${machineId}/used-hints`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch used hints in contest');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Give up a contest.\r\n   * @param {string} contestId - The ID of the contest.\r\n   * @returns {Promise<Object>} - The response data confirming giving up.\r\n   */\r\n  export const giveUpContest = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/contest/${contestId}/give-up`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to give up contest');\r\n    }\r\n  };\r\n\r\n  export const getMyRankinContest = async (contestId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/contest/${contestId}/my-rank`);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch my rank in contest');\r\n    }\r\n  };\r\n"],"names":["getContests","axiosInstance","error","createContest","contestData","participateInContest","contestId","submitFlagForContest","machineId","flag","getHintInContest","deleteContest","getLeaderboardByContest","getContestStatus","getContestDetails","ActivateContest","DeactivateContest","getActiveContests","getUsedHintsInContest","giveUpContest","getMyRankinContest"],"mappings":"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"}