{"version":3,"file":"GiveUpButton-D21FeauA.js","sources":["../../src/components/play/DisplayReward.tsx","../../src/components/play/GetHints.tsx","../../src/components/play/StartInstanceButton.tsx","../../src/components/play/DownloadVPNProfile.tsx","../../src/components/play/InstanceInfo.tsx","../../src/components/play/SubmitFlagForm.tsx","../../src/components/modal/GiveUpModal.tsx","../../src/components/play/GiveUpButton.tsx"],"sourcesContent":["import React from 'react';\r\n\r\n/**\r\n * Props interface for DisplayReward component.\r\n */\r\ninterface DisplayRewardProps {\r\n  reward: number;\r\n}\r\n\r\n/**\r\n * Component to display the user's reward.\r\n */\r\nconst DisplayReward: React.FC<DisplayRewardProps> = ({ reward }) => {\r\n  return (\r\n    <div className=\"reward-display\">\r\n      <h4>Reward: {reward} EXP</h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayReward;","import React, { useState, useEffect } from 'react';\r\nimport { getUsedHintsInContest, getHintInContest } from '../../api/axiosContest';\r\nimport { getUsedHints, getMachineHints } from '../../api/axiosMachine';\r\n\r\n/**\r\n * Props interface for GetHints component.\r\n */\r\ninterface GetHintsProps {\r\n  machineId: string;\r\n  playType: 'machine' | 'contest';\r\n  contestId?: string; // Optional, required only for contest mode\r\n  disabled?: boolean; // Optional, to disable the component\r\n}\r\n\r\n/**\r\n * Interface representing the hint data.\r\n */\r\ninterface Hint {\r\n  content: string;\r\n}\r\n\r\n/**\r\n * Interface representing an error message.\r\n */\r\ninterface ErrorMessage {\r\n  msg: string;\r\n}\r\n\r\n/**\r\n * Component to fetch and display hints for a machine or contest.\r\n */\r\nconst GetHints: React.FC<GetHintsProps> = ({ machineId, playType, contestId, disabled = false }) => {\r\n  const [hints, setHints] = useState<Hint[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<ErrorMessage | null>(null);\r\n  const [hintsUsed, setHintsUsed] = useState<number>(0);\r\n  const [remainingHints, setRemainingHints] = useState<number>(0);\r\n\r\n  /**\r\n   * Fetch used hints and progress for contest mode.\r\n   */\r\n  const fetchUsedHintsInContestMode = async () => {\r\n    try {\r\n      if (!contestId) {\r\n        throw new Error('Contest ID is missing.');\r\n      }\r\n\r\n      const response = await getUsedHintsInContest(contestId, machineId);\r\n\r\n      if (response && response.usedHints) {\r\n        setHints(response.usedHints.map((hintContent: string) => ({ content: hintContent })));\r\n        setHintsUsed(response.hintsUsed);\r\n        setRemainingHints(response.remainingHints);\r\n      } else {\r\n        setHints([]);\r\n        setHintsUsed(0);\r\n        setRemainingHints(0);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error fetching used hints in contest:', err);\r\n      setError({ msg: err.message || 'Failed to fetch used hints in contest.' });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Fetch used hints and progress for machine mode.\r\n   */\r\n  const fetchUsedHintsMachineMode = async () => {\r\n    try {\r\n      const response = await getUsedHints(machineId);\r\n\r\n      if (response && response.usedHints) {\r\n        setHints(response.usedHints.map((hintContent: string) => ({ content: hintContent })));\r\n        setHintsUsed(response.hintsUsed);\r\n        setRemainingHints(response.remainingHints);\r\n      } else {\r\n        setHints([]);\r\n        setHintsUsed(0);\r\n        setRemainingHints(0);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error fetching used hints:', err);\r\n      setError({ msg: 'Failed to fetch used hints.' });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Fetch a single hint based on play type and append it to the hints list.\r\n   */\r\n  const fetchHint = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      let response;\r\n      if (playType === 'machine') {\r\n        response = await getMachineHints(machineId);\r\n      } else if (playType === 'contest') {\r\n        if (!contestId) {\r\n          throw new Error('Contest ID is missing for contest mode.');\r\n        }\r\n        response = await getHintInContest(contestId, machineId);\r\n      }\r\n\r\n      if (response?.hint) {\r\n        setHints(prevHints => [...prevHints, { content: response.hint }]);\r\n        setHintsUsed(response.hintsUsed);\r\n        setRemainingHints(response.remainingHints);\r\n      } else {\r\n        throw new Error('Invalid response from server.');\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error fetching hint:', err);\r\n      setError({ msg: err.msg || 'Failed to fetch hint.' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Fetch used hints on component mount or when machine/playType changes.\r\n   */\r\n  useEffect(() => {\r\n    if (playType === 'contest') {\r\n      fetchUsedHintsInContestMode();\r\n    } else if (playType === 'machine') {\r\n      fetchUsedHintsMachineMode();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [machineId, playType, contestId]);\r\n\r\n  return (\r\n    <div className=\"get-hints-container\">\r\n      <h3>Hints</h3>\r\n      {loading && <p>Loading hints...</p>}\r\n      {error && <div className=\"error-message\">{error.msg}</div>}\r\n      {!loading && !error && hintsUsed > 0 && (\r\n        <div className=\"used-hints\">\r\n          <h4>Used Hints ({hintsUsed})</h4>\r\n          <ul className=\"hints-list\">\r\n            {hints.map((hint, index) => (\r\n              <li key={index}>{hint.content}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {!loading && !error && remainingHints > 0 && (\r\n        <div className=\"remaining-hints\">\r\n          <h4>Remaining Hints ({remainingHints})</h4>\r\n        </div>\r\n      )}\r\n      {!loading && !error && hintsUsed === 0 && <p>No hints used yet.</p>}\r\n      <button\r\n        onClick={fetchHint}\r\n        disabled={loading || remainingHints === 0 || disabled}\r\n        className=\"get-hints-button\"\r\n      >\r\n        {loading\r\n          ? 'Loading...'\r\n          : remainingHints === 0\r\n          ? 'No More Hints'\r\n          : disabled\r\n          ? 'Disabled'\r\n          : 'Get Hint'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetHints;","import React, { useState } from 'react';\r\nimport { startInstance } from '../../api/axiosInstance';\r\n\r\n/**\r\n * Props interface for StartInstanceButton component.\r\n */\r\ninterface StartInstanceButtonProps {\r\n  machineId: string;\r\n  onInstanceStarted: () => void;\r\n}\r\n\r\n/**\r\n * Interface representing API response.\r\n * Adjust according to your actual API response structure.\r\n */\r\ninterface StartInstanceResponse {\r\n  msg?: string;\r\n  // Add other response properties if needed\r\n}\r\n\r\n/**\r\n * Component to start an instance for a machine.\r\n */\r\nconst StartInstanceButton: React.FC<StartInstanceButtonProps> = ({ machineId, onInstanceStarted }) => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  /**\r\n   * Handles the instance start action.\r\n   */\r\n  const handleStartInstance = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response: StartInstanceResponse = await startInstance(machineId);\r\n      console.log('Instance started successfully:', response);\r\n      onInstanceStarted();\r\n    } catch (err: any) {\r\n      console.error('Error starting instance:', err);\r\n      setError(err.msg || 'Failed to start instance.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"start-instance-button-container\">\r\n      <button\r\n        onClick={handleStartInstance}\r\n        disabled={loading}\r\n        className=\"start-instance-button\"\r\n      >\r\n        {loading ? 'Starting...' : 'Start Instance'}\r\n      </button>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartInstanceButton;","import React from 'react';\r\nimport { downloadOpenVPNProfile } from '../../api/axiosInstance';\r\n\r\n/**\r\n * Component to download the OpenVPN profile.\r\n */\r\nconst DownloadVPNProfile: React.FC = () => {\r\n  /**\r\n   * Handles the VPN profile download.\r\n   */\r\n  const handleDownload = async () => {\r\n    try {\r\n      const response = await downloadOpenVPNProfile();\r\n      \r\n      // Assuming the response is a Blob\r\n      const blob = new Blob([response.data], { type: 'application/x-openvpn-profile' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      \r\n      // Create and trigger download\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'vpn-profile.ovpn');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      \r\n      // Cleanup\r\n      link.parentNode?.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n\r\n    } catch (error: any) {\r\n      console.error('Error downloading OpenVPN profile:', error);\r\n      alert(error.response?.data?.msg || 'Failed to download OpenVPN profile.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button onClick={handleDownload} className=\"download-vpn-button\">\r\n      Download VPN Profile\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DownloadVPNProfile;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getInstanceByMachine } from '../../api/axiosInstance';\r\nimport { Instance } from '../../types/Instance';\r\n\r\n/**\r\n * Props interface for InstanceInfo component.\r\n */\r\nexport interface InstanceInfoProps {\r\n  machineId: string;\r\n  onStatusChange?: (status: Instance['status']) => void; // Callback prop\r\n}\r\n\r\n/**\r\n * Component to display instance information.\r\n */\r\nconst InstanceInfo: React.FC<InstanceInfoProps> = ({ machineId, onStatusChange }) => {\r\n  const [instance, setInstance] = useState<Instance | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isFetching, setIsFetching] = useState<boolean>(false); // To track fetching state\r\n\r\n  useEffect(() => {\r\n    if (!machineId) {\r\n      console.warn('InstanceInfo: machineId is not provided');\r\n      return;\r\n    }\r\n\r\n    let isMounted = true; // To prevent setting state on unmounted component\r\n\r\n    const fetchInstanceInfo = async () => {\r\n      setIsFetching(false);\r\n      try {\r\n        console.log('Fetching instance info for machineId:', machineId);\r\n        const response = await getInstanceByMachine(machineId);\r\n        console.log('Fetched instance data:', response);\r\n\r\n        if (isMounted) {\r\n          if (response.instance) {\r\n            const currentInstance = response.instance;\r\n            setInstance(currentInstance);\r\n            if (onStatusChange) {\r\n              onStatusChange(currentInstance.status);\r\n            }\r\n          } else {\r\n            setInstance(null);\r\n            if (onStatusChange) {\r\n              onStatusChange(null);\r\n            }\r\n          }\r\n        }\r\n      } catch (error: any) {\r\n        console.error('Error fetching instance info:', error.message || error);\r\n        if (isMounted) {\r\n          setError('Failed to fetch instance information.');\r\n          if (onStatusChange) {\r\n            onStatusChange(null);\r\n          }\r\n        }\r\n      } finally {\r\n        if (isMounted) {\r\n          setIsFetching(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Initial fetch\r\n    fetchInstanceInfo();\r\n\r\n    // Set up interval to fetch every 10 seconds (10000 milliseconds)\r\n    const intervalId = setInterval(fetchInstanceInfo, 10000);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false;\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [machineId, onStatusChange]);\r\n\r\n  if (isFetching) {\r\n    return <div className=\"instance-info-container\">Fetching instance information...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"instance-error\">Error: {error}</div>;\r\n  }\r\n\r\n  if (!instance) {\r\n    return <div className=\"instance-status\">Instance is pending</div>;\r\n  }\r\n\r\n  /**\r\n   * Determines the color based on the instance status.\r\n   * @param status - The current status of the instance.\r\n   * @returns The corresponding color.\r\n   */\r\n  const getStatusColor = (status: Instance['status']): string => {\r\n    switch (status) {\r\n      case 'stopped':\r\n      case null:\r\n        return 'red';\r\n      case 'pending':\r\n        return 'yellow';\r\n      case 'running':\r\n        return 'green';\r\n      default:\r\n        return 'black';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"instance-info-container\" style={{ border: '1px solid #ccc', padding: '10px', marginTop: '20px' }}>\r\n      <h4\r\n        style={{\r\n          color: getStatusColor(instance.status),\r\n        }}\r\n      >\r\n        Instance Status: {instance.status}\r\n      </h4>\r\n      <h4>VPN IP: {instance.vpnIp}</h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstanceInfo;","import React, { useState, FormEvent } from 'react';\r\nimport { submitFlagMachine } from '../../api/axiosMachine';\r\nimport { submitFlagForContest } from '../../api/axiosContest';\r\nimport { submitFlagInstance } from '../../api/axiosInstance';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n/**\r\n * Props interface for SubmitFlagForm component.\r\n */\r\ninterface SubmitFlagFormProps {\r\n  machineId: string;\r\n  playType: 'machine' | 'contest';\r\n  contestId?: string; // Optional, required only for contest mode\r\n  disabled?: boolean; // Added optional disabled prop\r\n}\r\n\r\n/**\r\n * Interface representing an error message.\r\n */\r\ninterface ErrorMessage {\r\n  msg: string;\r\n}\r\n\r\n/**\r\n * Interface representing API response.\r\n * Adjust according to your actual API response structure.\r\n */\r\ninterface SubmitFlagResponse {\r\n  msg?: string;\r\n  errors?: ErrorMessage[];\r\n}\r\n\r\n/**\r\n * Component for submitting a flag for a machine or contest.\r\n */\r\nconst SubmitFlagForm: React.FC<SubmitFlagFormProps> = ({ machineId, playType, contestId, disabled = false }) => {\r\n  const [flag, setFlag] = useState<string>('');\r\n  const [message, setMessage] = useState<string>('');\r\n  const [errors, setErrors] = useState<ErrorMessage[]>([]);\r\n  const navigate = useNavigate();\r\n\r\n  /**\r\n   * Handles the flag submission form.\r\n   * @param e - The form event.\r\n   */\r\n  const handleSubmitFlag = async (e: FormEvent<HTMLFormElement>): Promise<void> => {\r\n    e.preventDefault();\r\n    if (disabled) return; // Prevent submission if disabled\r\n\r\n    setErrors([]);\r\n    setMessage('');\r\n\r\n    // Validate that machineId and flag are present\r\n    if (!machineId) {\r\n      setErrors([{ msg: 'Machine ID is missing.' }]);\r\n      return;\r\n    }\r\n\r\n    if (playType === 'contest' && !contestId) {\r\n      setErrors([{ msg: 'Contest ID is missing for contest mode.' }]);\r\n      return;\r\n    }\r\n\r\n    if (!flag.trim()) {\r\n      setErrors([{ msg: 'Flag cannot be empty.' }]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let response: SubmitFlagResponse;\r\n\r\n      if (playType === 'machine') {\r\n        const instanceResponse = await submitFlagInstance(machineId, flag);\r\n        if (instanceResponse.message === \"ERROR\") {\r\n          setErrors([{ msg: instanceResponse.cause }]);\r\n          return;\r\n        } else {\r\n          response = await submitFlagMachine(machineId, flag);\r\n          if (response.msg === \"ERROR\") {\r\n            setErrors([{ msg: response.msg || 'An error occurred.' }]);\r\n            return;\r\n          }\r\n        }\r\n        setMessage(response.msg || instanceResponse.msg || 'Flag submitted successfully!');\r\n        navigate(`/machine/${machineId}/complete`);\r\n      } else if (playType === 'contest') {\r\n        if (!contestId) {\r\n          setErrors([{ msg: 'Contest ID is required for contest mode.' }]);\r\n          return;\r\n        }\r\n        const instanceResponse = await submitFlagInstance(machineId, flag);\r\n        if (instanceResponse.message === \"ERROR\") {\r\n          setErrors([{ msg: instanceResponse.cause }]);\r\n          return;\r\n        } else {\r\n          response = await submitFlagForContest(contestId, machineId, flag);\r\n        }\r\n        setMessage(response.msg || instanceResponse.msg || 'Flag submitted successfully for contest!');\r\n        navigate(`/contest/${contestId}/complete`);\r\n      }\r\n    } catch (error: any) {\r\n      // Handle different error structures\r\n      if (error.response && error.response.data) {\r\n        setErrors(error.response.data.errors || [{ msg: error.response.data.msg || 'An error occurred.' }]);\r\n      } else {\r\n        setErrors([{ msg: error.msg || error }]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"submit-flag-form\">\r\n      <h3>Submit Flag</h3>\r\n      {errors.length > 0 && (\r\n        <div className=\"error-messages\">\r\n          {errors.map((error, idx) => (\r\n            <p key={idx} className=\"error\">\r\n              {error.msg}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      )}\r\n      {message && <p className=\"message\">{message}</p>}\r\n      <form onSubmit={handleSubmitFlag}>\r\n        <div className=\"flag-input-group\">\r\n          <label htmlFor=\"flag\">Flag:</label>\r\n          <input\r\n            id=\"flag\"\r\n            type=\"text\"\r\n            value={flag}\r\n            onChange={(e) => setFlag(e.target.value)}\r\n            placeholder=\"Enter flag here\"\r\n            required\r\n            disabled={disabled} // Disable input when disabled\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"submit-flag-button\"\r\n          disabled={disabled} // Disable button when disabled\r\n        >\r\n          {disabled ? 'Disabled' : 'Submit Flag'}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubmitFlagForm;","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Modal from './Modal';\r\nimport { giveUpMachine } from '../../api/axiosMachine';\r\nimport { TerminateInstance } from '../../api/axiosInstance';\r\nimport styles from '../../assets/scss/etc/GiveUpModal.module.scss';\r\nimport { giveUpContest } from '../../api/axiosContest';\r\n\r\ninterface GiveUpModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  machineId: string;\r\n  contestId?: string;\r\n  machineName: string;\r\n  mode : \"machine\" | \"contest\";\r\n}\r\n\r\nconst GiveUpModal: React.FC<GiveUpModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  machineId,\r\n  contestId,\r\n  machineName,\r\n  mode\r\n}) => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleGiveUp = async () => {\r\n    try {\r\n      const terminateResponse = await TerminateInstance(machineId);\r\n      if (terminateResponse) {\r\n        if (mode === \"machine\") {\r\n          const machineResponse = await giveUpMachine(machineId);\r\n          if (machineResponse) {\r\n            navigate(`/machine/${machineId}`);\r\n          } else {\r\n            alert(machineResponse.msg);\r\n          }\r\n        } else if (mode === \"contest\") {\r\n          const contestResponse = await giveUpContest(contestId || \"\");\r\n          if (contestResponse) {\r\n            navigate(`/contest/${contestId}`);\r\n          } else {\r\n            alert(contestResponse.msg);\r\n          }\r\n        }\r\n      } else {\r\n        alert(terminateResponse.msg);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to give up:', error);\r\n      alert('Failed to give up. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onClose}>\r\n      <div className={styles.give_up_modal}>\r\n        <div className={styles.textbox}>\r\n        <div className={styles.text}>Give Up Confirmation</div>\r\n        <p>Are you sure you want to give up on <strong>{machineName}</strong>?</p>\r\n        <p className={styles.warning_text}>Warning: All your progress will be lost!</p>\r\n        </div>\r\n        <div className={styles.button_group}>\r\n          <button \r\n            onClick={handleGiveUp}\r\n            className={styles.give_up_button}\r\n          >\r\n            Yes, Give Up\r\n          </button>\r\n          <button \r\n            onClick={onClose}\r\n            className={styles.cancel_button}\r\n          >\r\n            No, Continue Playing\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default GiveUpModal;","import React, { useState } from 'react';\r\nimport GiveUpModal from '../modal/GiveUpModal';\r\n\r\ninterface GiveUpButtonProps {\r\n  machineId: string;\r\n  contestId?: string;\r\n  machineName: string;\r\n  mode: \"machine\" | \"contest\";\r\n  disabled?: boolean; // Added optional disabled prop\r\n}\r\n\r\nconst GiveUpButton: React.FC<GiveUpButtonProps> = ({ machineId, contestId, machineName, mode, disabled = false }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    if (disabled) return; // Prevent opening modal if disabled\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button \r\n        onClick={handleClick} \r\n        className=\"give-up-button\"\r\n        disabled={disabled} // Disable button when disabled\r\n        style={{ opacity: disabled ? 0.5 : 1, cursor: disabled ? 'not-allowed' : 'pointer' }} // Optional: Visual feedback\r\n      >\r\n        Give Up\r\n      </button>\r\n\r\n      <GiveUpModal\r\n        isOpen={isModalOpen}\r\n        onClose={() => setIsModalOpen(false)}\r\n        machineId={machineId}\r\n        contestId={contestId}\r\n        machineName={machineName}\r\n        mode={mode}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GiveUpButton;"],"names":["DisplayReward","reward","jsx","GetHints","machineId","playType","contestId","disabled","hints","setHints","useState","loading","setLoading","error","setError","hintsUsed","setHintsUsed","remainingHints","setRemainingHints","fetchUsedHintsInContestMode","response","getUsedHintsInContest","hintContent","err","fetchUsedHintsMachineMode","getUsedHints","fetchHint","getMachineHints","getHintInContest","prevHints","useEffect","jsxs","hint","index","StartInstanceButton","onInstanceStarted","handleStartInstance","startInstance","DownloadVPNProfile","handleDownload","downloadOpenVPNProfile","blob","url","link","_a","_c","_b","InstanceInfo","onStatusChange","instance","setInstance","isFetching","setIsFetching","isMounted","fetchInstanceInfo","getInstanceByMachine","currentInstance","intervalId","getStatusColor","status","SubmitFlagForm","flag","setFlag","message","setMessage","errors","setErrors","navigate","useNavigate","handleSubmitFlag","e","instanceResponse","submitFlagInstance","submitFlagMachine","submitFlagForContest","idx","GiveUpModal","isOpen","onClose","machineName","mode","handleGiveUp","terminateResponse","TerminateInstance","machineResponse","giveUpMachine","contestResponse","giveUpContest","Modal","styles","GiveUpButton","isModalOpen","setIsModalOpen","handleClick","Fragment"],"mappings":"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"}