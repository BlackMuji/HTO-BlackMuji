{"version":3,"file":"axiosInstance-ByXgwNmE.js","sources":["../../src/api/axiosInstance.tsx"],"sourcesContent":["import axiosInstance from './axiosInit';\r\n\r\n// ------- Instance related ------\r\n\r\n/**\r\n * Start a new EC2 instance with the specified machineId.\r\n * @param {string} machineId - The ID of the machine to start.\r\n * @returns {Promise<Object>} - The response data containing instance details.\r\n */\r\nexport const startInstance = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/inst/start-instance/${machineId}`);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to start instance');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get details of all instances(Admin only)\r\n   * @returns {Promise<Object>} - The response data containing instance details.\r\n   * Admin only\r\n   */\r\n  export const getAllInstances = async () => {\r\n    try {\r\n      const response = await axiosInstance.get('/inst/');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw new Error('Failed to fetch all instances');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get details of all instances by machine.\r\n   * @param {string} machineId - The ID of the machine to get instances.\r\n   * @returns {Promise<Object>} - The response data containing instance details.\r\n   */\r\n  export const getInstanceByMachine = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/inst/${machineId}`);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch instances');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Get details of a specific instance.\r\n   * @param {string} instanceId - The ID of the instance to retrieve details for.\r\n   * @returns {Promise<Object>} - The response data containing instance details.\r\n   */\r\n  export const getInstanceDetails = async (instanceId: string) => {\r\n    try {\r\n      const response = await axiosInstance.get(`/inst/${instanceId}`);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to fetch instance details');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Submit a flag for a specific instance.\r\n   * @param {string} machineId - The ID of the machine.\r\n   * @param {string} flag - The flag to submit.\r\n   * @returns {Promise<Object>} - The response data confirming submission.\r\n   */\r\n  export const submitFlagInstance = async (machineId: string, flag: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/inst/${machineId}/submit-flag`, { flag });\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to submit flag');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Terminate a specific instance.\r\n   * @param {string} instanceId - The ID of the instance to terminate.\r\n   * @returns {Promise<Object>} - The response data confirming termination.\r\n   * Admin only\r\n  */\r\n  export const TerminateInstanceById = async (instanceId: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/inst/terminate-admin/${instanceId}`);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to terminate instance');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Terminate all instances by machine.\r\n   * @param {string} machineId - The ID of the machine to terminate.\r\n   * @returns {Promise<Object>} - The response data confirming termination.\r\n   */\r\n  export const TerminateInstance = async (machineId: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/inst/terminate/${machineId}`);\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to terminate instance');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Submit VPN IP received by the EC2 instance.\r\n   * Note: This function is typically called from the backend, but including it here for completeness.\r\n   * @param {string} instanceId - The ID of the instance.\r\n   * @param {string} userId - The ID of the user.\r\n   * @param {string} vpnIp - The VPN IP to submit.\r\n   * @returns {Promise<Object>} - The response data confirming VPN IP update.\r\n   */\r\n  export const receiveVpnIp = async (instanceId: string, vpnIp: string) => {\r\n    try {\r\n      const response = await axiosInstance.post(`/inst/${instanceId}/receive-vpn-ip`, {\r\n        vpnIp,\r\n      });\r\n      return response.data; // Return the data received from the server\r\n    } catch (error: any) {\r\n      throw error.response ? error.response.data : new Error('Failed to receive VPN IP');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Download OpenVPN profile for a specific instance.\r\n   * @returns {Promise<Blob>} - The OpenVPN profile file blob.\r\n   */\r\n  export const downloadOpenVPNProfile = async () => {\r\n    try {\r\n      const response = await axiosInstance.get(`/inst/download-ovpn`, {\r\n        responseType: 'blob', // Important for handling binary data\r\n      });\r\n      return response.data; // This is the blob\r\n    } catch (error: any) {\r\n      throw error.response?.data || new Error('Failed to download OpenVPN profile');\r\n    }\r\n  };"],"names":["startInstance","machineId","axiosInstance","error","getAllInstances","getInstanceByMachine","submitFlagInstance","flag","TerminateInstanceById","instanceId","TerminateInstance","downloadOpenVPNProfile","_a"],"mappings":"yCASa,MAAAA,EAAgB,MAAOC,GAAsB,CAClD,GAAA,CAEF,OADiB,MAAMC,EAAc,KAAK,wBAAwBD,CAAS,EAAE,GAC7D,WACTE,EAAY,CACnB,MAAMA,EAAM,SAAWA,EAAM,SAAS,KAAO,IAAI,MAAM,0BAA0B,CAAA,CAErF,EAOaC,EAAkB,SAAY,CACrC,GAAA,CAEF,OADiB,MAAMF,EAAc,IAAI,QAAQ,GACjC,UACG,CACb,MAAA,IAAI,MAAM,+BAA+B,CAAA,CAEnD,EAOaG,EAAuB,MAAOJ,GAAsB,CAC3D,GAAA,CAEF,OADiB,MAAMC,EAAc,IAAI,SAASD,CAAS,EAAE,GAC7C,WACTE,EAAY,CACnB,MAAMA,EAAM,SAAWA,EAAM,SAAS,KAAO,IAAI,MAAM,2BAA2B,CAAA,CAEtF,EAsBaG,EAAqB,MAAOL,EAAmBM,IAAiB,CACvE,GAAA,CAEF,OADiB,MAAML,EAAc,KAAK,SAASD,CAAS,eAAgB,CAAE,KAAAM,EAAM,GACpE,WACTJ,EAAY,CACnB,MAAMA,EAAM,SAAWA,EAAM,SAAS,KAAO,IAAI,MAAM,uBAAuB,CAAA,CAElF,EAQaK,EAAwB,MAAOC,GAAuB,CAC7D,GAAA,CAEF,OADiB,MAAMP,EAAc,KAAK,yBAAyBO,CAAU,EAAE,GAC/D,WACTN,EAAY,CACnB,MAAMA,EAAM,SAAWA,EAAM,SAAS,KAAO,IAAI,MAAM,8BAA8B,CAAA,CAEzF,EAOaO,EAAoB,MAAOT,GAAsB,CACxD,GAAA,CAEF,OADiB,MAAMC,EAAc,KAAK,mBAAmBD,CAAS,EAAE,GACxD,WACTE,EAAY,CACnB,MAAMA,EAAM,SAAWA,EAAM,SAAS,KAAO,IAAI,MAAM,8BAA8B,CAAA,CAEzF,EAyBaQ,EAAyB,SAAY,OAC5C,GAAA,CAIF,OAHiB,MAAMT,EAAc,IAAI,sBAAuB,CAC9D,aAAc,MAAA,CACf,GACe,WACTC,EAAY,CACnB,OAAMS,EAAAT,EAAM,WAAN,YAAAS,EAAgB,OAAQ,IAAI,MAAM,oCAAoC,CAAA,CAEhF"}