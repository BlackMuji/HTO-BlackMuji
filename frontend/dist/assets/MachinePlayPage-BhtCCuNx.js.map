{"version":3,"file":"MachinePlayPage-BhtCCuNx.js","sources":["../../src/pages/machine/MachinePlayPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getActiveMachineDetails } from '../../api/axiosMachine';\r\nimport { getInstanceByMachine } from '../../api/axiosInstance';\r\nimport DisplayReward from '../../components/play/DisplayReward';\r\nimport GetHints from '../../components/play/GetHints';\r\nimport StartInstanceButton from '../../components/play/StartInstanceButton';\r\nimport DownloadVPNProfile from '../../components/play/DownloadVPNProfile';\r\nimport InstanceInfo from '../../components/play/InstanceInfo';\r\nimport SubmitFlagForm from '../../components/play/SubmitFlagForm';\r\nimport GiveUpButton from '../../components/play/GiveUpButton';\r\nimport Main from '../../components/main/Main';\r\nimport { Instance } from '../../types/Instance';\r\n\r\n/**\r\n * Interface representing the Machine details.\r\n */\r\ninterface Machine {\r\n  _id: string; // Assuming MongoDB-style IDs\r\n  name: string;\r\n  exp: number;\r\n  amiId: string;\r\n  // Add other machine properties as needed\r\n}\r\n\r\n/**\r\n * Interface for API response when fetching machine details.\r\n */\r\ninterface GetMachineDetailsResponse {\r\n  machine: Machine;\r\n  // Add other response properties if available\r\n}\r\n\r\n/**\r\n * Component representing the Machine Play Page.\r\n */\r\nconst MachinePlayPage: React.FC = () => {\r\n  const { machineId } = useParams<{ machineId: string }>();\r\n  const [machine, setMachine] = useState<Machine | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [instanceStatus, setInstanceStatus] = useState<Instance['status']>(null);\r\n  const [instanceStarted, setInstanceStarted] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n  // Fetch machine details and check for existing instance when component mounts\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!machineId) {\r\n        setError('Machine ID is missing.');\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Fetch machine details\r\n        const machineResponse: GetMachineDetailsResponse = await getActiveMachineDetails(machineId);\r\n        console.log('Machine Details:', machineResponse.machine); // Debugging\r\n        setMachine(machineResponse.machine);\r\n\r\n        // Fetch existing instances for the machine\r\n        const instanceResponse = await getInstanceByMachine(machineId);\r\n        console.log('Instance Response:', instanceResponse); // Debugging\r\n\r\n        if (instanceResponse.instances && instanceResponse.instances.length > 0) {\r\n          setInstanceStarted(true);\r\n          // Set initial instance status\r\n          const currentInstance = instanceResponse.instances[0];\r\n          setInstanceStatus(currentInstance.status);\r\n          console.log('Existing Instance Found:', currentInstance); // Debugging\r\n        } else {\r\n          setInstanceStarted(false);\r\n          setInstanceStatus(null);\r\n          console.log('No Existing Instance Found'); // Debugging\r\n        }\r\n      } catch (error: any) {\r\n        console.error('Error fetching machine details or instances:', error);\r\n        setError('Failed to fetch machine details or instances.');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [machineId]);\r\n\r\n  // Callback to receive instance status from InstanceInfo\r\n  const handleInstanceStatusChange = (status: Instance['status']) => {\r\n    console.log('Instance status changed to:', status); // Debugging\r\n    setInstanceStatus(status);\r\n  };\r\n\r\n  // Callback to set instance as started\r\n  const handleInstanceStarted = () => {\r\n    console.log('Instance has been started.'); // Debugging\r\n    setInstanceStarted(true);\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <Main>\r\n        <div className=\"machine-play-container\">\r\n          <h2>Machine Play</h2>\r\n          <div className=\"error-message\">{error}</div>\r\n        </div>\r\n      </Main>\r\n    );\r\n  }\r\n\r\n  if (!machine || isLoading) {\r\n    return (\r\n      <Main>\r\n        <div className=\"machine-play-container\">\r\n          <h2>Machine Play</h2>\r\n          <div>Loading machine details...</div>\r\n        </div>\r\n      </Main>\r\n    );\r\n  }\r\n\r\n  // Determine if controls should be disabled based on instance status\r\n  const isRunning = instanceStatus === 'running';\r\n\r\n  return (\r\n    <Main>\r\n      <div className=\"machine-play-container\">\r\n        <div className=\"machine-play-title\">\r\n          <h2>Machine Play</h2>\r\n        </div>\r\n        <div className=\"machine-play-name\">\r\n          <h3>Now Playing: {machine.name}</h3>\r\n        </div>\r\n        <DisplayReward reward={machine.exp} />\r\n        <DownloadVPNProfile />\r\n\r\n        {/* Conditionally render StartInstanceButton or InstanceInfo */}\r\n        {!instanceStarted ? (\r\n          <StartInstanceButton\r\n            machineId={machineId || ''}\r\n            onInstanceStarted={handleInstanceStarted} // Pass the callback\r\n          />\r\n        ) : (\r\n          <InstanceInfo\r\n            machineId={machineId || ''}\r\n            onStatusChange={handleInstanceStatusChange}\r\n          />\r\n        )}\r\n\r\n        <GetHints\r\n          machineId={machineId || ''}\r\n          playType=\"machine\"\r\n          disabled={!isRunning} // Disable based on instance status\r\n        />\r\n        <SubmitFlagForm\r\n          machineId={machineId || ''}\r\n          playType=\"machine\"\r\n          disabled={!isRunning} // Disable based on instance status\r\n        />\r\n        <GiveUpButton\r\n          machineId={machineId || ''}\r\n          machineName={machine.name}\r\n          mode=\"machine\"\r\n          //disabled={!isRunning} // Disable based on instance status\r\n        />\r\n      </div>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default MachinePlayPage;"],"names":["MachinePlayPage","machineId","useParams","machine","setMachine","useState","error","setError","instanceStatus","setInstanceStatus","instanceStarted","setInstanceStarted","isLoading","setIsLoading","useEffect","machineResponse","getActiveMachineDetails","instanceResponse","getInstanceByMachine","currentInstance","handleInstanceStatusChange","status","handleInstanceStarted","jsx","Main","jsxs","isRunning","DisplayReward","DownloadVPNProfile","InstanceInfo","StartInstanceButton","GetHints","SubmitFlagForm","GiveUpButton"],"mappings":"wRAoCA,MAAMA,EAA4B,IAAM,CAChC,KAAA,CAAE,UAAAC,CAAU,EAAIC,EAAiC,EACjD,CAACC,EAASC,CAAU,EAAIC,EAAAA,SAAyB,IAAI,EACrD,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAwB,IAAI,EAChD,CAACG,EAAgBC,CAAiB,EAAIJ,EAAAA,SAA6B,IAAI,EACvE,CAACK,EAAiBC,CAAkB,EAAIN,EAAAA,SAAkB,EAAK,EAC/D,CAACO,EAAWC,CAAY,EAAIR,EAAAA,SAAkB,EAAI,EAGxDS,EAAAA,UAAU,IAAM,EACI,SAAY,CAC5B,GAAI,CAACb,EAAW,CACdM,EAAS,wBAAwB,EACjCM,EAAa,EAAK,EAClB,MAAA,CAGE,GAAA,CAEI,MAAAE,EAA6C,MAAMC,EAAwBf,CAAS,EAClF,QAAA,IAAI,mBAAoBc,EAAgB,OAAO,EACvDX,EAAWW,EAAgB,OAAO,EAG5B,MAAAE,EAAmB,MAAMC,EAAqBjB,CAAS,EAG7D,GAFQ,QAAA,IAAI,qBAAsBgB,CAAgB,EAE9CA,EAAiB,WAAaA,EAAiB,UAAU,OAAS,EAAG,CACvEN,EAAmB,EAAI,EAEjB,MAAAQ,EAAkBF,EAAiB,UAAU,CAAC,EACpDR,EAAkBU,EAAgB,MAAM,EAChC,QAAA,IAAI,2BAA4BA,CAAe,CAAA,MAEvDR,EAAmB,EAAK,EACxBF,EAAkB,IAAI,EACtB,QAAQ,IAAI,4BAA4B,QAEnCH,EAAY,CACX,QAAA,MAAM,+CAAgDA,CAAK,EACnEC,EAAS,+CAA+C,CAAA,QACxD,CACAM,EAAa,EAAK,CAAA,CAEtB,GAEU,CAAA,EACT,CAACZ,CAAS,CAAC,EAGR,MAAAmB,EAA8BC,GAA+B,CACzD,QAAA,IAAI,8BAA+BA,CAAM,EACjDZ,EAAkBY,CAAM,CAC1B,EAGMC,EAAwB,IAAM,CAClC,QAAQ,IAAI,4BAA4B,EACxCX,EAAmB,EAAI,CACzB,EAEA,GAAIL,EACF,OACGiB,EAAA,IAAAC,EAAA,CACC,SAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAY,cAAA,CAAA,EACfA,EAAA,IAAA,MAAA,CAAI,UAAU,gBAAiB,SAAMjB,CAAA,CAAA,CAAA,CAAA,CACxC,CACF,CAAA,EAIA,GAAA,CAACH,GAAWS,EACd,OACGW,EAAA,IAAAC,EAAA,CACC,SAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAF,EAAAA,IAAC,MAAG,SAAY,cAAA,CAAA,EAChBA,EAAAA,IAAC,OAAI,SAA0B,4BAAA,CAAA,CAAA,CAAA,CACjC,CACF,CAAA,EAKJ,MAAMG,EAAYlB,IAAmB,UAErC,OACGe,EAAA,IAAAC,EAAA,CACC,SAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAF,EAAAA,IAAC,OAAI,UAAU,qBACb,SAACA,MAAA,KAAA,CAAG,wBAAY,CAClB,CAAA,EACCA,MAAA,MAAA,CAAI,UAAU,oBACb,gBAAC,KAAG,CAAA,SAAA,CAAA,gBAAcpB,EAAQ,IAAA,CAAA,CAAK,CACjC,CAAA,EACCoB,EAAAA,IAAAI,EAAA,CAAc,OAAQxB,EAAQ,GAAK,CAAA,QACnCyB,EAAmB,EAAA,EAGlBlB,EAMAa,EAAA,IAACM,EAAA,CACC,UAAW5B,GAAa,GACxB,eAAgBmB,CAAA,CAClB,EARAG,EAAA,IAACO,EAAA,CACC,UAAW7B,GAAa,GACxB,kBAAmBqB,CAAA,CAAA,EASvBC,EAAA,IAACQ,EAAA,CACC,UAAW9B,GAAa,GACxB,SAAS,UACT,SAAU,CAACyB,CAAA,CACb,EACAH,EAAA,IAACS,EAAA,CACC,UAAW/B,GAAa,GACxB,SAAS,UACT,SAAU,CAACyB,CAAA,CACb,EACAH,EAAA,IAACU,EAAA,CACC,UAAWhC,GAAa,GACxB,YAAaE,EAAQ,KACrB,KAAK,SAAA,CAAA,CAEP,CAAA,CACF,CACF,CAAA,CAEJ"}