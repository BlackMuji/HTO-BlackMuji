{"version":3,"file":"ContestRegisterPage-CYGLFeoM.js","sources":["../../src/components/contest/AddContestForm.tsx","../../src/pages/contest/ContestRegisterPage.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { createContest } from '../../api/axiosContest';\r\nimport { getActiveMachines } from '../../api/axiosMachine';\r\nimport '../../assets/scss/contest/AddContestForm.scss';\r\n\r\ninterface Contest {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    startTime: string;\r\n    endTime: string;\r\n    machines: string[];\r\n    contestExp: number;\r\n};\r\n\r\ninterface AddContestFormProps {\r\n    onContestAdded: (contest: Contest) => void;\r\n}\r\n\r\ninterface Machine {\r\n    id: string;\r\n    name: string;\r\n};\r\n\r\ninterface FormData {\r\n    name: string;\r\n    description: string;\r\n    startTime: string;\r\n    endTime: string;\r\n    machines: Machine[];\r\n    contestExp: number;\r\n};\r\n\r\ninterface Suggestions {\r\n    [key: number]: Machine[];\r\n}\r\n\r\nconst AddContestForm: React.FC<AddContestFormProps> = ({ onContestAdded }) => {\r\n    const [formData, setFormData] = useState<FormData>({\r\n        name: '',\r\n        description: '',\r\n        startTime: '',\r\n        endTime: '',\r\n        machines: [{ id: '', name: '' }],\r\n        contestExp: 100,\r\n    });\r\n    const [loading, setLoading] = useState(false);\r\n    const [allMachines, setAllMachines] = useState<Machine[]>([]);\r\n    const [suggestions, setSuggestions] = useState<Suggestions>({});\r\n    const [activeSuggestion, setActiveSuggestion] = useState<Record<number, number>>({});\r\n    const [focusedMachineIndex, setFocusedMachineIndex] = useState<number | null>(null);\r\n\r\n    const formRef = useRef<HTMLFormElement>(null);\r\n\r\n    const { name, description, contestExp, startTime, endTime, machines } = formData;\r\n\r\n    const adjustTextareaHeight = () => {\r\n        const descriptionRef = document.getElementById('description') as HTMLTextAreaElement | null;\r\n        if (descriptionRef) {\r\n            descriptionRef.style.height = 'auto';\r\n            descriptionRef.style.height = `${descriptionRef.scrollHeight}px`;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        adjustTextareaHeight();\r\n    }, [description]);\r\n\r\n    useEffect(() => {\r\n        const fetchAllMachines = async () => {\r\n            try {\r\n                const data = await getActiveMachines();\r\n                if (\r\n                    Array.isArray(data.machines) &&\r\n                    typeof data.machines[0] === 'object' &&\r\n                    'name' in data.machines[0] &&\r\n                    '_id' in data.machines[0]\r\n                ) {\r\n                    const machinesList = data.machines.map((machine: any) => ({\r\n                        id: machine._id,\r\n                        name: machine.name, \r\n                    }));\r\n                    setAllMachines(machinesList);\r\n                } else if (Array.isArray(data.machines) && typeof data.machines[0] === 'string') {\r\n                    console.warn('Machines are received as strings. Expected objects with _id and name.');\r\n                    setAllMachines([]);\r\n                } else {\r\n                    console.error('Unexpected format for machines:', data.machines);\r\n                    setAllMachines([]);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching machines:', error);\r\n                setAllMachines([]);\r\n            }\r\n        };\r\n        fetchAllMachines();\r\n    }, []);\r\n\r\n    const handleChange = (\r\n        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n        index?: number\r\n    ) => {\r\n        const { name, value } = e.target;\r\n        if (name.startsWith('machine-') && typeof index === 'number') {\r\n            const newMachines = [...machines];\r\n            newMachines[index] = { id: '', name: value };\r\n            setFormData({ ...formData, machines: newMachines });\r\n\r\n            if (value) {\r\n                const filteredSuggestions = allMachines.filter(machine =>\r\n                    machine.name.toLowerCase().includes(value.toLowerCase())\r\n                );\r\n                setSuggestions(prev => ({\r\n                    ...prev,\r\n                    [index]: filteredSuggestions,\r\n                }));\r\n            } else {\r\n                setSuggestions(prev => ({\r\n                    ...prev,\r\n                    [index]: [],\r\n                }));\r\n            }\r\n\r\n            setFocusedMachineIndex(index);\r\n        } else {\r\n            setFormData({ ...formData, [name]: name === 'contestExp' ? Number(value) : value });\r\n        }\r\n    };\r\n\r\n    const handleFocus = (index: number) => {\r\n        setFocusedMachineIndex(index);\r\n        if (machines[index].name) {\r\n            const filteredSuggestions = allMachines.filter(machine =>\r\n                machine.name.toLowerCase().includes(machines[index].name.toLowerCase())\r\n            );\r\n            setSuggestions(prev => ({\r\n                ...prev,\r\n                [index]: filteredSuggestions,\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleAddMachineField = () => {\r\n        setFormData({\r\n            ...formData,\r\n            machines: [...machines, { id: '', name: '' }],\r\n        });\r\n    };\r\n\r\n    const handleDeleteMachineField = (index: number) => {\r\n        const newMachines = machines.filter((_, i) => i !== index);\r\n        setFormData({\r\n            ...formData,\r\n            machines: newMachines,\r\n        });\r\n        setSuggestions(prev => {\r\n            const updated = { ...prev };\r\n            delete updated[index];\r\n            return updated;\r\n        });\r\n        setActiveSuggestion(prev => {\r\n            const updated = { ...prev };\r\n            delete updated[index];\r\n            return updated;\r\n        });\r\n        setFocusedMachineIndex(null);\r\n    };\r\n\r\n    const handleSuggestionClick = (index: number, suggestion: Machine) => {\r\n        const newMachines = [...machines];\r\n        newMachines[index] = { id: suggestion.id, name: suggestion.name };\r\n        setFormData({ ...formData, machines: newMachines });\r\n        setSuggestions(prev => ({\r\n            ...prev,\r\n            [index]: [],\r\n        }));\r\n        setActiveSuggestion(prev => ({\r\n            ...prev,\r\n            [index]: -1,\r\n        }));\r\n        setFocusedMachineIndex(null);\r\n    };\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>, index: number) => {\r\n        const suggestionList = suggestions[index] || [];\r\n        if (e.key === 'ArrowDown') {\r\n            e.preventDefault();\r\n            setActiveSuggestion(prev => ({\r\n                ...prev,\r\n                [index]: (prev[index] || -1) + 1,\r\n            }));\r\n        } else if (e.key === 'ArrowUp') {\r\n            e.preventDefault();\r\n            setActiveSuggestion(prev => ({\r\n                ...prev,\r\n                [index]: (prev[index] || 0) - 1,\r\n            }));\r\n        } else if (e.key === 'Enter') {\r\n            if (activeSuggestion[index] >= 0 && activeSuggestion[index] < suggestionList.length) {\r\n                e.preventDefault();\r\n                handleSuggestionClick(index, suggestionList[activeSuggestion[index]]);\r\n            }\r\n        } else if (e.key === 'Escape') {\r\n            setSuggestions(prev => ({\r\n                ...prev,\r\n                [index]: [],\r\n            }));\r\n            setActiveSuggestion(prev => ({\r\n                ...prev,\r\n                [index]: -1,\r\n            }));\r\n            setFocusedMachineIndex(null);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        if (machines.length < 1) {\r\n            alert('Please add at least 1 machine.');\r\n            return;\r\n        }\r\n        if (!name || !description || contestExp <= 0 || !startTime || !endTime) {\r\n            alert('Please fill in all required fields.');\r\n            return;\r\n        }\r\n        for (let i = 0; i < machines.length; i++) {\r\n            if (!machines[i].id) {\r\n                alert(`Please select a valid machine for field ${i + 1}.`);\r\n                return;\r\n            }\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const utcStartTime = new Date(startTime).toISOString();\r\n            const utcEndTime = new Date(endTime).toISOString();\r\n\r\n            const machineIds = machines.map(machine => machine.id);\r\n            const data = await createContest({\r\n                name,\r\n                description,\r\n                startTime: utcStartTime,\r\n                endTime: utcEndTime,\r\n                machines: machineIds,\r\n                contestExp,\r\n            });\r\n            alert('Contest registered successfully.');\r\n            setFormData({\r\n                name: '',\r\n                description: '',\r\n                startTime: '',\r\n                endTime: '',\r\n                machines: [{ id: '', name: '' }],\r\n                contestExp: 0,\r\n            });\r\n            setSuggestions({});\r\n            setActiveSuggestion({});\r\n            setFocusedMachineIndex(null);\r\n            if (onContestAdded) onContestAdded(data.contest);\r\n        } catch (error: any) {\r\n            console.error('Error creating contest:', error);\r\n            alert(error.msg || 'Failed to register contest.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (formRef.current && !formRef.current.contains(event.target as Node)) {\r\n                setSuggestions({});\r\n                setActiveSuggestion({});\r\n                setFocusedMachineIndex(null);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <form className='add-contest-form' onSubmit={handleSubmit} ref={formRef}>\r\n            <h2>Register a New Contest</h2>\r\n            <div>\r\n                <label htmlFor=\"name\">Name<span style={{ color: 'red' }}> *</span>:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={(e) => handleChange(e)}\r\n                    placeholder=\"Enter the contest name\"\r\n                    required\r\n                />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"description\">Description<span style={{ color: 'red' }}> *</span>:</label>\r\n                <textarea\r\n                    id=\"description\"\r\n                    name=\"description\"\r\n                    value={description}\r\n                    onChange={(e) => handleChange(e)}\r\n                    placeholder=\"Enter contest description\"\r\n                    required\r\n                ></textarea>\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"contestExp\">Experience Points (EXP)<span style={{ color: 'red' }}> *</span>:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    id=\"contestExp\"\r\n                    name=\"contestExp\"\r\n                    value={contestExp}\r\n                    onChange={(e) => handleChange(e)}\r\n                    placeholder=\"Enter the EXP\"\r\n                    min=\"100\"\r\n                    required\r\n                />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"startTime\">Start Time<span style={{ color: 'red' }}> *</span>:</label>\r\n                <input\r\n                    type=\"datetime-local\"\r\n                    id=\"startTime\"\r\n                    name=\"startTime\"\r\n                    value={startTime}\r\n                    onChange={(e) => handleChange(e)}\r\n                    placeholder=\"Enter the start time\"\r\n                    required\r\n                />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"endTime\">End Time<span style={{ color: 'red' }}> *</span>:</label>\r\n                <input\r\n                    type=\"datetime-local\"\r\n                    id=\"endTime\"\r\n                    name=\"endTime\"\r\n                    value={endTime}\r\n                    onChange={(e) => handleChange(e)}\r\n                    placeholder=\"Enter the end time\"\r\n                    required\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Machines<span style={{ color: 'red' }}> *</span>:</label>\r\n                {machines.map((machine, index) => (\r\n                    <div key={index} className=\"machine-field\">\r\n                        <input\r\n                            type=\"text\"\r\n                            name={`machine-${index}`}\r\n                            value={machine.name}\r\n                            onChange={(e) => handleChange(e, index)}\r\n                            onFocus={() => handleFocus(index)}\r\n                            onKeyDown={(e) => handleKeyDown(e, index)}\r\n                            placeholder={`Machine ${index + 1}`}\r\n                            autoComplete=\"off\"\r\n                            required\r\n                            aria-autocomplete=\"list\"\r\n                            aria-controls={`suggestions-${index}`}\r\n                            aria-expanded={focusedMachineIndex === index && suggestions[index]?.length > 0}\r\n                            role=\"combobox\"\r\n                            aria-haspopup=\"listbox\"\r\n                            aria-activedescendant={\r\n                                activeSuggestion[index] >= 0\r\n                                    ? `suggestion-${index}-${activeSuggestion[index]}`\r\n                                    : undefined\r\n                            }\r\n                        />\r\n                        {machines.length > 1 && (\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => handleDeleteMachineField(index)}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                        )}\r\n                        {focusedMachineIndex === index && suggestions[index] && suggestions[index].length > 0 ? (\r\n                            <ul\r\n                                className=\"suggestions-list\"\r\n                                id={`suggestions-${index}`}\r\n                                role=\"listbox\"\r\n                            >\r\n                                {suggestions[index].map((suggestion, sIndex) => (\r\n                                    <li\r\n                                        key={sIndex}\r\n                                        id={`suggestion-${index}-${sIndex}`}\r\n                                        className={activeSuggestion[index] === sIndex ? 'active' : ''}\r\n                                        onMouseDown={() => handleSuggestionClick(index, suggestion)}\r\n                                        onMouseEnter={() =>\r\n                                            setActiveSuggestion(prev => ({\r\n                                                ...prev,\r\n                                                [index]: sIndex,\r\n                                            }))\r\n                                        }\r\n                                        onMouseLeave={() =>\r\n                                            setActiveSuggestion(prev => ({\r\n                                                ...prev,\r\n                                                [index]: -1,\r\n                                            }))\r\n                                        }\r\n                                        role=\"option\"\r\n                                        aria-selected={activeSuggestion[index] === sIndex}\r\n                                    >\r\n                                        {suggestion.name}\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        ) : machine.name && focusedMachineIndex === index && (\r\n                            <div className=\"no-suggestions\">No matching machines found.</div>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n                <button type=\"button\" onClick={handleAddMachineField}>\r\n                    Add Machine\r\n                </button>\r\n            </div>\r\n            <button type=\"submit\" disabled={loading}>\r\n                {loading ? 'Registering...' : 'Register Contest'}\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddContestForm;\r\n","import React from 'react';\r\nimport Main from '../../components/main/Main';\r\nimport AddContestForm from '../../components/contest/AddContestForm';\r\n\r\nconst ContestRegisterPage: React.FC = () => {\r\n    return (\r\n        <Main>\r\n            <AddContestForm onContestAdded={() => {}} />\r\n        </Main>\r\n    );\r\n};\r\n\r\nexport default ContestRegisterPage;\r\n"],"names":["AddContestForm","onContestAdded","formData","setFormData","useState","loading","setLoading","allMachines","setAllMachines","suggestions","setSuggestions","activeSuggestion","setActiveSuggestion","focusedMachineIndex","setFocusedMachineIndex","formRef","useRef","name","description","contestExp","startTime","endTime","machines","adjustTextareaHeight","descriptionRef","useEffect","data","getActiveMachines","machinesList","machine","error","handleChange","e","index","value","newMachines","filteredSuggestions","prev","handleFocus","handleAddMachineField","handleDeleteMachineField","_","i","updated","handleSuggestionClick","suggestion","handleKeyDown","suggestionList","handleSubmit","utcStartTime","utcEndTime","machineIds","createContest","handleClickOutside","event","jsx","jsxs","_a","sIndex","ContestRegisterPage","Main"],"mappings":"oJAqCA,MAAMA,EAAgD,CAAC,CAAE,eAAAC,KAAqB,CAC1E,KAAM,CAACC,EAAUC,CAAW,EAAIC,WAAmB,CAC/C,KAAM,GACN,YAAa,GACb,UAAW,GACX,QAAS,GACT,SAAU,CAAC,CAAE,GAAI,GAAI,KAAM,GAAI,EAC/B,WAAY,GAAA,CACf,EACK,CAACC,EAASC,CAAU,EAAIF,EAAAA,SAAS,EAAK,EACtC,CAACG,EAAaC,CAAc,EAAIJ,EAAAA,SAAoB,CAAA,CAAE,EACtD,CAACK,EAAaC,CAAc,EAAIN,EAAAA,SAAsB,CAAA,CAAE,EACxD,CAACO,EAAkBC,CAAmB,EAAIR,EAAAA,SAAiC,CAAA,CAAE,EAC7E,CAACS,EAAqBC,CAAsB,EAAIV,EAAAA,SAAwB,IAAI,EAE5EW,EAAUC,SAAwB,IAAI,EAEtC,CAAE,KAAAC,EAAM,YAAAC,EAAa,WAAAC,EAAY,UAAAC,EAAW,QAAAC,EAAS,SAAAC,GAAapB,EAElEqB,EAAuB,IAAM,CACzB,MAAAC,EAAiB,SAAS,eAAe,aAAa,EACxDA,IACAA,EAAe,MAAM,OAAS,OAC9BA,EAAe,MAAM,OAAS,GAAGA,EAAe,YAAY,KAEpE,EAEAC,EAAAA,UAAU,IAAM,CACSF,EAAA,CAAA,EACtB,CAACL,CAAW,CAAC,EAEhBO,EAAAA,UAAU,IAAM,EACa,SAAY,CAC7B,GAAA,CACM,MAAAC,EAAO,MAAMC,EAAkB,EAEjC,GAAA,MAAM,QAAQD,EAAK,QAAQ,GAC3B,OAAOA,EAAK,SAAS,CAAC,GAAM,UAC5B,SAAUA,EAAK,SAAS,CAAC,GACzB,QAASA,EAAK,SAAS,CAAC,EAC1B,CACE,MAAME,EAAeF,EAAK,SAAS,IAAKG,IAAkB,CACtD,GAAIA,EAAQ,IACZ,KAAMA,EAAQ,IAAA,EAChB,EACFrB,EAAeoB,CAAY,CAC/B,MAAW,MAAM,QAAQF,EAAK,QAAQ,GAAK,OAAOA,EAAK,SAAS,CAAC,GAAM,UACnE,QAAQ,KAAK,uEAAuE,EACpFlB,EAAe,CAAA,CAAE,IAET,QAAA,MAAM,kCAAmCkB,EAAK,QAAQ,EAC9DlB,EAAe,CAAA,CAAE,SAEhBsB,EAAO,CACJ,QAAA,MAAM,2BAA4BA,CAAK,EAC/CtB,EAAe,CAAA,CAAE,CAAA,CAEzB,GACiB,CACrB,EAAG,EAAE,EAEC,MAAAuB,EAAe,CACjBC,EACAC,IACC,CACD,KAAM,CAAE,KAAAhB,EAAM,MAAAiB,GAAUF,EAAE,OAC1B,GAAIf,EAAK,WAAW,UAAU,GAAK,OAAOgB,GAAU,SAAU,CACpD,MAAAE,EAAc,CAAC,GAAGb,CAAQ,EAIhC,GAHAa,EAAYF,CAAK,EAAI,CAAE,GAAI,GAAI,KAAMC,CAAM,EAC3C/B,EAAY,CAAE,GAAGD,EAAU,SAAUiC,EAAa,EAE9CD,EAAO,CACP,MAAME,EAAsB7B,EAAY,OAAOsB,GAC3CA,EAAQ,KAAK,YAAA,EAAc,SAASK,EAAM,YAAa,CAAA,CAC3D,EACAxB,EAAwB2B,IAAA,CACpB,GAAGA,EACH,CAACJ,CAAK,EAAGG,CAAA,EACX,CAAA,MAEF1B,EAAwB2B,IAAA,CACpB,GAAGA,EACH,CAACJ,CAAK,EAAG,CAAA,CAAC,EACZ,EAGNnB,EAAuBmB,CAAK,CAAA,MAE5B9B,EAAY,CAAE,GAAGD,EAAU,CAACe,CAAI,EAAGA,IAAS,aAAe,OAAOiB,CAAK,EAAIA,EAAO,CAE1F,EAEMI,EAAeL,GAAkB,CAE/B,GADJnB,EAAuBmB,CAAK,EACxBX,EAASW,CAAK,EAAE,KAAM,CACtB,MAAMG,EAAsB7B,EAAY,OAAOsB,GAC3CA,EAAQ,KAAK,YAAY,EAAE,SAASP,EAASW,CAAK,EAAE,KAAK,YAAa,CAAA,CAC1E,EACAvB,EAAwB2B,IAAA,CACpB,GAAGA,EACH,CAACJ,CAAK,EAAGG,CAAA,EACX,CAAA,CAEV,EAEMG,EAAwB,IAAM,CACpBpC,EAAA,CACR,GAAGD,EACH,SAAU,CAAC,GAAGoB,EAAU,CAAE,GAAI,GAAI,KAAM,EAAI,CAAA,CAAA,CAC/C,CACL,EAEMkB,EAA4BP,GAAkB,CAChD,MAAME,EAAcb,EAAS,OAAO,CAACmB,EAAGC,IAAMA,IAAMT,CAAK,EAC7C9B,EAAA,CACR,GAAGD,EACH,SAAUiC,CAAA,CACb,EACDzB,EAAuB2B,GAAA,CACb,MAAAM,EAAU,CAAE,GAAGN,CAAK,EAC1B,cAAOM,EAAQV,CAAK,EACbU,CAAA,CACV,EACD/B,EAA4ByB,GAAA,CAClB,MAAAM,EAAU,CAAE,GAAGN,CAAK,EAC1B,cAAOM,EAAQV,CAAK,EACbU,CAAA,CACV,EACD7B,EAAuB,IAAI,CAC/B,EAEM8B,EAAwB,CAACX,EAAeY,IAAwB,CAC5D,MAAAV,EAAc,CAAC,GAAGb,CAAQ,EACpBa,EAAAF,CAAK,EAAI,CAAE,GAAIY,EAAW,GAAI,KAAMA,EAAW,IAAK,EAChE1C,EAAY,CAAE,GAAGD,EAAU,SAAUiC,EAAa,EAClDzB,EAAwB2B,IAAA,CACpB,GAAGA,EACH,CAACJ,CAAK,EAAG,CAAA,CAAC,EACZ,EACFrB,EAA6ByB,IAAA,CACzB,GAAGA,EACH,CAACJ,CAAK,EAAG,EAAA,EACX,EACFnB,EAAuB,IAAI,CAC/B,EAEMgC,EAAgB,CAACd,EAA0CC,IAAkB,CAC/E,MAAMc,EAAiBtC,EAAYwB,CAAK,GAAK,CAAC,EAC1CD,EAAE,MAAQ,aACVA,EAAE,eAAe,EACjBpB,EAA6ByB,IAAA,CACzB,GAAGA,EACH,CAACJ,CAAK,GAAII,EAAKJ,CAAK,GAAK,IAAM,CAAA,EACjC,GACKD,EAAE,MAAQ,WACjBA,EAAE,eAAe,EACjBpB,EAA6ByB,IAAA,CACzB,GAAGA,EACH,CAACJ,CAAK,GAAII,EAAKJ,CAAK,GAAK,GAAK,CAAA,EAChC,GACKD,EAAE,MAAQ,QACbrB,EAAiBsB,CAAK,GAAK,GAAKtB,EAAiBsB,CAAK,EAAIc,EAAe,SACzEf,EAAE,eAAe,EACjBY,EAAsBX,EAAOc,EAAepC,EAAiBsB,CAAK,CAAC,CAAC,GAEjED,EAAE,MAAQ,WACjBtB,EAAwB2B,IAAA,CACpB,GAAGA,EACH,CAACJ,CAAK,EAAG,CAAA,CAAC,EACZ,EACFrB,EAA6ByB,IAAA,CACzB,GAAGA,EACH,CAACJ,CAAK,EAAG,EAAA,EACX,EACFnB,EAAuB,IAAI,EAEnC,EAEMkC,EAAe,MAAOhB,GAAwC,CAE5D,GADJA,EAAE,eAAe,EACbV,EAAS,OAAS,EAAG,CACrB,MAAM,gCAAgC,EACtC,MAAA,CAEA,GAAA,CAACL,GAAQ,CAACC,GAAeC,GAAc,GAAK,CAACC,GAAa,CAACC,EAAS,CACpE,MAAM,qCAAqC,EAC3C,MAAA,CAEJ,QAASqB,EAAI,EAAGA,EAAIpB,EAAS,OAAQoB,IACjC,GAAI,CAACpB,EAASoB,CAAC,EAAE,GAAI,CACX,MAAA,2CAA2CA,EAAI,CAAC,GAAG,EACzD,MAAA,CAGRpC,EAAW,EAAI,EACX,GAAA,CACA,MAAM2C,EAAe,IAAI,KAAK7B,CAAS,EAAE,YAAY,EAC/C8B,EAAa,IAAI,KAAK7B,CAAO,EAAE,YAAY,EAE3C8B,EAAa7B,EAAS,IAAIO,GAAWA,EAAQ,EAAE,EAC/CH,EAAO,MAAM0B,EAAc,CAC7B,KAAAnC,EACA,YAAAC,EACA,UAAW+B,EACX,QAASC,EACT,SAAUC,EACV,WAAAhC,CAAA,CACH,EACD,MAAM,kCAAkC,EAC5BhB,EAAA,CACR,KAAM,GACN,YAAa,GACb,UAAW,GACX,QAAS,GACT,SAAU,CAAC,CAAE,GAAI,GAAI,KAAM,GAAI,EAC/B,WAAY,CAAA,CACf,EACDO,EAAe,CAAA,CAAE,EACjBE,EAAoB,CAAA,CAAE,EACtBE,EAAuB,IAAI,EACvBb,GAA+BA,EAAAyB,EAAK,OAAO,QAC1CI,EAAY,CACT,QAAA,MAAM,0BAA2BA,CAAK,EACxC,MAAAA,EAAM,KAAO,6BAA6B,CAAA,QAClD,CACExB,EAAW,EAAK,CAAA,CAExB,EAEAmB,OAAAA,EAAAA,UAAU,IAAM,CACN,MAAA4B,EAAsBC,GAAsB,CAC1CvC,EAAQ,SAAW,CAACA,EAAQ,QAAQ,SAASuC,EAAM,MAAc,IACjE5C,EAAe,CAAA,CAAE,EACjBE,EAAoB,CAAA,CAAE,EACtBE,EAAuB,IAAI,EAEnC,EAES,gBAAA,iBAAiB,YAAauC,CAAkB,EAClD,IAAM,CACA,SAAA,oBAAoB,YAAaA,CAAkB,CAChE,CACJ,EAAG,EAAE,SAGA,OAAK,CAAA,UAAU,mBAAmB,SAAUL,EAAc,IAAKjC,EAC5D,SAAA,CAAAwC,EAAAA,IAAC,MAAG,SAAsB,wBAAA,CAAA,SACzB,MACG,CAAA,SAAA,CAACC,EAAAA,KAAA,QAAA,CAAM,QAAQ,OAAO,SAAA,CAAA,aAAK,OAAK,CAAA,MAAO,CAAE,MAAO,OAAS,SAAE,KAAA,EAAO,GAAA,EAAC,EACnED,EAAA,IAAC,QAAA,CACG,KAAK,OACL,GAAG,OACH,KAAK,OACL,MAAOtC,EACP,SAAWe,GAAMD,EAAaC,CAAC,EAC/B,YAAY,yBACZ,SAAQ,EAAA,CAAA,CACZ,EACJ,SACC,MACG,CAAA,SAAA,CAACwB,EAAAA,KAAA,QAAA,CAAM,QAAQ,cAAc,SAAA,CAAA,oBAAY,OAAK,CAAA,MAAO,CAAE,MAAO,OAAS,SAAE,KAAA,EAAO,GAAA,EAAC,EACjFD,EAAA,IAAC,WAAA,CACG,GAAG,cACH,KAAK,cACL,MAAOrC,EACP,SAAWc,GAAMD,EAAaC,CAAC,EAC/B,YAAY,4BACZ,SAAQ,EAAA,CAAA,CACX,EACL,SACC,MACG,CAAA,SAAA,CAACwB,EAAAA,KAAA,QAAA,CAAM,QAAQ,aAAa,SAAA,CAAA,gCAAwB,OAAK,CAAA,MAAO,CAAE,MAAO,OAAS,SAAE,KAAA,EAAO,GAAA,EAAC,EAC5FD,EAAA,IAAC,QAAA,CACG,KAAK,SACL,GAAG,aACH,KAAK,aACL,MAAOpC,EACP,SAAWa,GAAMD,EAAaC,CAAC,EAC/B,YAAY,gBACZ,IAAI,MACJ,SAAQ,EAAA,CAAA,CACZ,EACJ,SACC,MACG,CAAA,SAAA,CAACwB,EAAAA,KAAA,QAAA,CAAM,QAAQ,YAAY,SAAA,CAAA,mBAAW,OAAK,CAAA,MAAO,CAAE,MAAO,OAAS,SAAE,KAAA,EAAO,GAAA,EAAC,EAC9ED,EAAA,IAAC,QAAA,CACG,KAAK,iBACL,GAAG,YACH,KAAK,YACL,MAAOnC,EACP,SAAWY,GAAMD,EAAaC,CAAC,EAC/B,YAAY,uBACZ,SAAQ,EAAA,CAAA,CACZ,EACJ,SACC,MACG,CAAA,SAAA,CAACwB,EAAAA,KAAA,QAAA,CAAM,QAAQ,UAAU,SAAA,CAAA,iBAAS,OAAK,CAAA,MAAO,CAAE,MAAO,OAAS,SAAE,KAAA,EAAO,GAAA,EAAC,EAC1ED,EAAA,IAAC,QAAA,CACG,KAAK,iBACL,GAAG,UACH,KAAK,UACL,MAAOlC,EACP,SAAWW,GAAMD,EAAaC,CAAC,EAC/B,YAAY,qBACZ,SAAQ,EAAA,CAAA,CACZ,EACJ,SACC,MACG,CAAA,SAAA,CAAAwB,OAAC,QAAM,CAAA,SAAA,CAAA,iBAAS,OAAK,CAAA,MAAO,CAAE,MAAO,OAAS,SAAE,KAAA,EAAO,GAAA,EAAC,EACvDlC,EAAS,IAAI,CAACO,EAASI,WACnBuB,OAAAA,OAAA,MAAA,CAAgB,UAAU,gBACvB,SAAA,CAAAD,EAAA,IAAC,QAAA,CACG,KAAK,OACL,KAAM,WAAWtB,CAAK,GACtB,MAAOJ,EAAQ,KACf,SAAWG,GAAMD,EAAaC,EAAGC,CAAK,EACtC,QAAS,IAAMK,EAAYL,CAAK,EAChC,UAAYD,GAAMc,EAAcd,EAAGC,CAAK,EACxC,YAAa,WAAWA,EAAQ,CAAC,GACjC,aAAa,MACb,SAAQ,GACR,oBAAkB,OAClB,gBAAe,eAAeA,CAAK,GACnC,gBAAepB,IAAwBoB,KAASwB,EAAAhD,EAAYwB,CAAK,IAAjB,YAAAwB,EAAoB,QAAS,EAC7E,KAAK,WACL,gBAAc,UACd,wBACI9C,EAAiBsB,CAAK,GAAK,EACrB,cAAcA,CAAK,IAAItB,EAAiBsB,CAAK,CAAC,GAC9C,MAAA,CAEd,EACCX,EAAS,OAAS,GACfiC,EAAA,IAAC,SAAA,CACG,KAAK,SACL,QAAS,IAAMf,EAAyBP,CAAK,EAChD,SAAA,QAAA,CAED,EAEHpB,IAAwBoB,GAASxB,EAAYwB,CAAK,GAAKxB,EAAYwB,CAAK,EAAE,OAAS,EAChFsB,EAAA,IAAC,KAAA,CACG,UAAU,mBACV,GAAI,eAAetB,CAAK,GACxB,KAAK,UAEJ,WAAYA,CAAK,EAAE,IAAI,CAACY,EAAYa,IACjCH,EAAA,IAAC,KAAA,CAEG,GAAI,cAActB,CAAK,IAAIyB,CAAM,GACjC,UAAW/C,EAAiBsB,CAAK,IAAMyB,EAAS,SAAW,GAC3D,YAAa,IAAMd,EAAsBX,EAAOY,CAAU,EAC1D,aAAc,IACVjC,EAA6ByB,IAAA,CACzB,GAAGA,EACH,CAACJ,CAAK,EAAGyB,CAAA,EACX,EAEN,aAAc,IACV9C,EAA6ByB,IAAA,CACzB,GAAGA,EACH,CAACJ,CAAK,EAAG,EAAA,EACX,EAEN,KAAK,SACL,gBAAetB,EAAiBsB,CAAK,IAAMyB,EAE1C,SAAWb,EAAA,IAAA,EAnBPa,CAqBZ,CAAA,CAAA,CACL,EACA7B,EAAQ,MAAQhB,IAAwBoB,GACvCsB,EAAAA,IAAA,MAAA,CAAI,UAAU,iBAAiB,SAA2B,6BAAA,CAAA,CAAA,CAAA,EA9DzDtB,CAgEV,EACH,QACA,SAAO,CAAA,KAAK,SAAS,QAASM,EAAuB,SAEtD,aAAA,CAAA,CAAA,EACJ,EACAgB,EAAAA,IAAC,UAAO,KAAK,SAAS,SAAUlD,EAC3B,SAAAA,EAAU,iBAAmB,kBAClC,CAAA,CAAA,EACJ,CAER,EClaMsD,EAAgC,IAE7BJ,EAAAA,IAAAK,EAAA,CACG,SAACL,EAAAA,IAAAvD,EAAA,CAAe,eAAgB,IAAM,GAAI,CAC9C,CAAA"}